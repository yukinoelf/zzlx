// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Buddy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Buddy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Buddy {

void protobuf_ShutdownFile_IM_2eBuddy_2eproto() {
  delete IMRecentContactSessionReq::default_instance_;
  delete IMRecentContactSessionRsp::default_instance_;
  delete IMUserStatNotify::default_instance_;
  delete IMUsersInfoReq::default_instance_;
  delete IMUsersInfoRsp::default_instance_;
  delete IMRemoveSessionReq::default_instance_;
  delete IMRemoveSessionRsp::default_instance_;
  delete IMAllUserReq::default_instance_;
  delete IMAllUserRsp::default_instance_;
  delete IMUsersStatReq::default_instance_;
  delete IMUsersStatRsp::default_instance_;
  delete IMChangeAvatarReq::default_instance_;
  delete IMChangeAvatarRsp::default_instance_;
  delete IMPCLoginStatusNotify::default_instance_;
  delete IMRemoveSessionNotify::default_instance_;
  delete IMDepartmentReq::default_instance_;
  delete IMDepartmentRsp::default_instance_;
  delete IMAvatarChangedNotify::default_instance_;
  delete IMChangeSignInfoReq::default_instance_;
  delete IMChangeSignInfoRsp::default_instance_;
  delete IMSignInfoChangedNotify::default_instance_;
  delete TravelToolInfo::default_instance_;
  delete BasicInfo::default_instance_;
  delete TransportConfig::default_instance_;
  delete TravelDetail::default_instance_;
  delete TransportTool::default_instance_;
  delete DayScenic::default_instance_;
  delete DayHotel::default_instance_;
  delete PlayDetail::default_instance_;
  delete PlayConfig::default_instance_;
  delete ScenicInfo::default_instance_;
  delete HotelInfo::default_instance_;
  delete MyTravel::default_instance_;
  delete CreateMyTravelReq::default_instance_;
  delete CreateMyTravelRsp::default_instance_;
  delete DeleteMyTravelReq::default_instance_;
  delete DeleteMyTravelRsp::default_instance_;
  delete UpdateMyTravelReq::default_instance_;
  delete UpdateMyTravelRsp::default_instance_;
  delete QueryMyTravelReq::default_instance_;
  delete QueryMyTravelRsp::default_instance_;
  delete GetTransportToolReq::default_instance_;
  delete GetTransportToolRsp::default_instance_;
  delete GetScenicHotelReq::default_instance_;
  delete GetScenicHotelRsp::default_instance_;
  delete DayRoute::default_instance_;
  delete Route::default_instance_;
  delete CollectionRoute::default_instance_;
  delete NewQueryRadomRouteReq::default_instance_;
  delete NewQueryRadomRouteRsp::default_instance_;
  delete NewUpdateRadomRouteReq::default_instance_;
  delete NewUpdateRadomRouteRsp::default_instance_;
  delete NewCreateMyTravelReq::default_instance_;
  delete NewCreateMyTravelRsp::default_instance_;
  delete NewCreateCollectRouteReq::default_instance_;
  delete NewCreateCollectRouteRsp::default_instance_;
  delete NewDelCollectRouteReq::default_instance_;
  delete NewDelCollectRouteRsp::default_instance_;
  delete NewQueryCollectRouteReq::default_instance_;
  delete NewQueryCollectRouteRsp::default_instance_;
  delete Info_Modify_Req::default_instance_;
  delete Info_Modify_Rsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_IM_2eBuddy_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_IM_2eBuddy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::IM::BaseDefine::protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  IMRecentContactSessionReq::default_instance_ = new IMRecentContactSessionReq();
  IMRecentContactSessionRsp::default_instance_ = new IMRecentContactSessionRsp();
  IMUserStatNotify::default_instance_ = new IMUserStatNotify();
  IMUsersInfoReq::default_instance_ = new IMUsersInfoReq();
  IMUsersInfoRsp::default_instance_ = new IMUsersInfoRsp();
  IMRemoveSessionReq::default_instance_ = new IMRemoveSessionReq();
  IMRemoveSessionRsp::default_instance_ = new IMRemoveSessionRsp();
  IMAllUserReq::default_instance_ = new IMAllUserReq();
  IMAllUserRsp::default_instance_ = new IMAllUserRsp();
  IMUsersStatReq::default_instance_ = new IMUsersStatReq();
  IMUsersStatRsp::default_instance_ = new IMUsersStatRsp();
  IMChangeAvatarReq::default_instance_ = new IMChangeAvatarReq();
  IMChangeAvatarRsp::default_instance_ = new IMChangeAvatarRsp();
  IMPCLoginStatusNotify::default_instance_ = new IMPCLoginStatusNotify();
  IMRemoveSessionNotify::default_instance_ = new IMRemoveSessionNotify();
  IMDepartmentReq::default_instance_ = new IMDepartmentReq();
  IMDepartmentRsp::default_instance_ = new IMDepartmentRsp();
  IMAvatarChangedNotify::default_instance_ = new IMAvatarChangedNotify();
  IMChangeSignInfoReq::default_instance_ = new IMChangeSignInfoReq();
  IMChangeSignInfoRsp::default_instance_ = new IMChangeSignInfoRsp();
  IMSignInfoChangedNotify::default_instance_ = new IMSignInfoChangedNotify();
  TravelToolInfo::default_instance_ = new TravelToolInfo();
  BasicInfo::default_instance_ = new BasicInfo();
  TransportConfig::default_instance_ = new TransportConfig();
  TravelDetail::default_instance_ = new TravelDetail();
  TransportTool::default_instance_ = new TransportTool();
  DayScenic::default_instance_ = new DayScenic();
  DayHotel::default_instance_ = new DayHotel();
  PlayDetail::default_instance_ = new PlayDetail();
  PlayConfig::default_instance_ = new PlayConfig();
  ScenicInfo::default_instance_ = new ScenicInfo();
  HotelInfo::default_instance_ = new HotelInfo();
  MyTravel::default_instance_ = new MyTravel();
  CreateMyTravelReq::default_instance_ = new CreateMyTravelReq();
  CreateMyTravelRsp::default_instance_ = new CreateMyTravelRsp();
  DeleteMyTravelReq::default_instance_ = new DeleteMyTravelReq();
  DeleteMyTravelRsp::default_instance_ = new DeleteMyTravelRsp();
  UpdateMyTravelReq::default_instance_ = new UpdateMyTravelReq();
  UpdateMyTravelRsp::default_instance_ = new UpdateMyTravelRsp();
  QueryMyTravelReq::default_instance_ = new QueryMyTravelReq();
  QueryMyTravelRsp::default_instance_ = new QueryMyTravelRsp();
  GetTransportToolReq::default_instance_ = new GetTransportToolReq();
  GetTransportToolRsp::default_instance_ = new GetTransportToolRsp();
  GetScenicHotelReq::default_instance_ = new GetScenicHotelReq();
  GetScenicHotelRsp::default_instance_ = new GetScenicHotelRsp();
  DayRoute::default_instance_ = new DayRoute();
  Route::default_instance_ = new Route();
  CollectionRoute::default_instance_ = new CollectionRoute();
  NewQueryRadomRouteReq::default_instance_ = new NewQueryRadomRouteReq();
  NewQueryRadomRouteRsp::default_instance_ = new NewQueryRadomRouteRsp();
  NewUpdateRadomRouteReq::default_instance_ = new NewUpdateRadomRouteReq();
  NewUpdateRadomRouteRsp::default_instance_ = new NewUpdateRadomRouteRsp();
  NewCreateMyTravelReq::default_instance_ = new NewCreateMyTravelReq();
  NewCreateMyTravelRsp::default_instance_ = new NewCreateMyTravelRsp();
  NewCreateCollectRouteReq::default_instance_ = new NewCreateCollectRouteReq();
  NewCreateCollectRouteRsp::default_instance_ = new NewCreateCollectRouteRsp();
  NewDelCollectRouteReq::default_instance_ = new NewDelCollectRouteReq();
  NewDelCollectRouteRsp::default_instance_ = new NewDelCollectRouteRsp();
  NewQueryCollectRouteReq::default_instance_ = new NewQueryCollectRouteReq();
  NewQueryCollectRouteRsp::default_instance_ = new NewQueryCollectRouteRsp();
  Info_Modify_Req::default_instance_ = new Info_Modify_Req();
  Info_Modify_Rsp::default_instance_ = new Info_Modify_Rsp();
  IMRecentContactSessionReq::default_instance_->InitAsDefaultInstance();
  IMRecentContactSessionRsp::default_instance_->InitAsDefaultInstance();
  IMUserStatNotify::default_instance_->InitAsDefaultInstance();
  IMUsersInfoReq::default_instance_->InitAsDefaultInstance();
  IMUsersInfoRsp::default_instance_->InitAsDefaultInstance();
  IMRemoveSessionReq::default_instance_->InitAsDefaultInstance();
  IMRemoveSessionRsp::default_instance_->InitAsDefaultInstance();
  IMAllUserReq::default_instance_->InitAsDefaultInstance();
  IMAllUserRsp::default_instance_->InitAsDefaultInstance();
  IMUsersStatReq::default_instance_->InitAsDefaultInstance();
  IMUsersStatRsp::default_instance_->InitAsDefaultInstance();
  IMChangeAvatarReq::default_instance_->InitAsDefaultInstance();
  IMChangeAvatarRsp::default_instance_->InitAsDefaultInstance();
  IMPCLoginStatusNotify::default_instance_->InitAsDefaultInstance();
  IMRemoveSessionNotify::default_instance_->InitAsDefaultInstance();
  IMDepartmentReq::default_instance_->InitAsDefaultInstance();
  IMDepartmentRsp::default_instance_->InitAsDefaultInstance();
  IMAvatarChangedNotify::default_instance_->InitAsDefaultInstance();
  IMChangeSignInfoReq::default_instance_->InitAsDefaultInstance();
  IMChangeSignInfoRsp::default_instance_->InitAsDefaultInstance();
  IMSignInfoChangedNotify::default_instance_->InitAsDefaultInstance();
  TravelToolInfo::default_instance_->InitAsDefaultInstance();
  BasicInfo::default_instance_->InitAsDefaultInstance();
  TransportConfig::default_instance_->InitAsDefaultInstance();
  TravelDetail::default_instance_->InitAsDefaultInstance();
  TransportTool::default_instance_->InitAsDefaultInstance();
  DayScenic::default_instance_->InitAsDefaultInstance();
  DayHotel::default_instance_->InitAsDefaultInstance();
  PlayDetail::default_instance_->InitAsDefaultInstance();
  PlayConfig::default_instance_->InitAsDefaultInstance();
  ScenicInfo::default_instance_->InitAsDefaultInstance();
  HotelInfo::default_instance_->InitAsDefaultInstance();
  MyTravel::default_instance_->InitAsDefaultInstance();
  CreateMyTravelReq::default_instance_->InitAsDefaultInstance();
  CreateMyTravelRsp::default_instance_->InitAsDefaultInstance();
  DeleteMyTravelReq::default_instance_->InitAsDefaultInstance();
  DeleteMyTravelRsp::default_instance_->InitAsDefaultInstance();
  UpdateMyTravelReq::default_instance_->InitAsDefaultInstance();
  UpdateMyTravelRsp::default_instance_->InitAsDefaultInstance();
  QueryMyTravelReq::default_instance_->InitAsDefaultInstance();
  QueryMyTravelRsp::default_instance_->InitAsDefaultInstance();
  GetTransportToolReq::default_instance_->InitAsDefaultInstance();
  GetTransportToolRsp::default_instance_->InitAsDefaultInstance();
  GetScenicHotelReq::default_instance_->InitAsDefaultInstance();
  GetScenicHotelRsp::default_instance_->InitAsDefaultInstance();
  DayRoute::default_instance_->InitAsDefaultInstance();
  Route::default_instance_->InitAsDefaultInstance();
  CollectionRoute::default_instance_->InitAsDefaultInstance();
  NewQueryRadomRouteReq::default_instance_->InitAsDefaultInstance();
  NewQueryRadomRouteRsp::default_instance_->InitAsDefaultInstance();
  NewUpdateRadomRouteReq::default_instance_->InitAsDefaultInstance();
  NewUpdateRadomRouteRsp::default_instance_->InitAsDefaultInstance();
  NewCreateMyTravelReq::default_instance_->InitAsDefaultInstance();
  NewCreateMyTravelRsp::default_instance_->InitAsDefaultInstance();
  NewCreateCollectRouteReq::default_instance_->InitAsDefaultInstance();
  NewCreateCollectRouteRsp::default_instance_->InitAsDefaultInstance();
  NewDelCollectRouteReq::default_instance_->InitAsDefaultInstance();
  NewDelCollectRouteRsp::default_instance_->InitAsDefaultInstance();
  NewQueryCollectRouteReq::default_instance_->InitAsDefaultInstance();
  NewQueryCollectRouteRsp::default_instance_->InitAsDefaultInstance();
  Info_Modify_Req::default_instance_->InitAsDefaultInstance();
  Info_Modify_Rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eBuddy_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_IM_2eBuddy_2eproto_once_);
void protobuf_AddDesc_IM_2eBuddy_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_IM_2eBuddy_2eproto_once_,
                 &protobuf_AddDesc_IM_2eBuddy_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eBuddy_2eproto {
  StaticDescriptorInitializer_IM_2eBuddy_2eproto() {
    protobuf_AddDesc_IM_2eBuddy_2eproto();
  }
} static_descriptor_initializer_IM_2eBuddy_2eproto_;
#endif
bool TransportToolType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

bool PositionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool QualityType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool ModifyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int IMRecentContactSessionReq::kUserIdFieldNumber;
const int IMRecentContactSessionReq::kLatestUpdateTimeFieldNumber;
const int IMRecentContactSessionReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMRecentContactSessionReq::IMRecentContactSessionReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMRecentContactSessionReq)
}

void IMRecentContactSessionReq::InitAsDefaultInstance() {
}

IMRecentContactSessionReq::IMRecentContactSessionReq(const IMRecentContactSessionReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMRecentContactSessionReq)
}

void IMRecentContactSessionReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  latest_update_time_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMRecentContactSessionReq::~IMRecentContactSessionReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMRecentContactSessionReq)
  SharedDtor();
}

void IMRecentContactSessionReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMRecentContactSessionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRecentContactSessionReq& IMRecentContactSessionReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMRecentContactSessionReq* IMRecentContactSessionReq::default_instance_ = NULL;

IMRecentContactSessionReq* IMRecentContactSessionReq::New() const {
  return new IMRecentContactSessionReq;
}

void IMRecentContactSessionReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMRecentContactSessionReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, latest_update_time_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMRecentContactSessionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMRecentContactSessionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_latest_update_time;
        break;
      }

      // required uint32 latest_update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_latest_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
          set_has_latest_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMRecentContactSessionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMRecentContactSessionReq)
  return false;
#undef DO_
}

void IMRecentContactSessionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMRecentContactSessionReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 latest_update_time = 2;
  if (has_latest_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMRecentContactSessionReq)
}

int IMRecentContactSessionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 latest_update_time = 2;
    if (has_latest_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRecentContactSessionReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRecentContactSessionReq*>(&from));
}

void IMRecentContactSessionReq::MergeFrom(const IMRecentContactSessionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_latest_update_time()) {
      set_latest_update_time(from.latest_update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMRecentContactSessionReq::CopyFrom(const IMRecentContactSessionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRecentContactSessionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMRecentContactSessionReq::Swap(IMRecentContactSessionReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(latest_update_time_, other->latest_update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMRecentContactSessionReq::GetTypeName() const {
  return "IM.Buddy.IMRecentContactSessionReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMRecentContactSessionRsp::kUserIdFieldNumber;
const int IMRecentContactSessionRsp::kContactSessionListFieldNumber;
const int IMRecentContactSessionRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMRecentContactSessionRsp::IMRecentContactSessionRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMRecentContactSessionRsp)
}

void IMRecentContactSessionRsp::InitAsDefaultInstance() {
}

IMRecentContactSessionRsp::IMRecentContactSessionRsp(const IMRecentContactSessionRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMRecentContactSessionRsp)
}

void IMRecentContactSessionRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMRecentContactSessionRsp::~IMRecentContactSessionRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMRecentContactSessionRsp)
  SharedDtor();
}

void IMRecentContactSessionRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMRecentContactSessionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRecentContactSessionRsp& IMRecentContactSessionRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMRecentContactSessionRsp* IMRecentContactSessionRsp::default_instance_ = NULL;

IMRecentContactSessionRsp* IMRecentContactSessionRsp::New() const {
  return new IMRecentContactSessionRsp;
}

void IMRecentContactSessionRsp::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  contact_session_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMRecentContactSessionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMRecentContactSessionRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contact_session_list;
        break;
      }

      // repeated .IM.BaseDefine.ContactSessionInfo contact_session_list = 2;
      case 2: {
        if (tag == 18) {
         parse_contact_session_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contact_session_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_contact_session_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMRecentContactSessionRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMRecentContactSessionRsp)
  return false;
#undef DO_
}

void IMRecentContactSessionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMRecentContactSessionRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.ContactSessionInfo contact_session_list = 2;
  for (int i = 0; i < this->contact_session_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->contact_session_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMRecentContactSessionRsp)
}

int IMRecentContactSessionRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.ContactSessionInfo contact_session_list = 2;
  total_size += 1 * this->contact_session_list_size();
  for (int i = 0; i < this->contact_session_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contact_session_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRecentContactSessionRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRecentContactSessionRsp*>(&from));
}

void IMRecentContactSessionRsp::MergeFrom(const IMRecentContactSessionRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  contact_session_list_.MergeFrom(from.contact_session_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMRecentContactSessionRsp::CopyFrom(const IMRecentContactSessionRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRecentContactSessionRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->contact_session_list())) return false;
  return true;
}

void IMRecentContactSessionRsp::Swap(IMRecentContactSessionRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    contact_session_list_.Swap(&other->contact_session_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMRecentContactSessionRsp::GetTypeName() const {
  return "IM.Buddy.IMRecentContactSessionRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUserStatNotify::kUserStatFieldNumber;
#endif  // !_MSC_VER

IMUserStatNotify::IMUserStatNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUserStatNotify)
}

void IMUserStatNotify::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_stat_ = const_cast< ::IM::BaseDefine::UserStat*>(
      ::IM::BaseDefine::UserStat::internal_default_instance());
#else
  user_stat_ = const_cast< ::IM::BaseDefine::UserStat*>(&::IM::BaseDefine::UserStat::default_instance());
#endif
}

IMUserStatNotify::IMUserStatNotify(const IMUserStatNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUserStatNotify)
}

void IMUserStatNotify::SharedCtor() {
  _cached_size_ = 0;
  user_stat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUserStatNotify::~IMUserStatNotify() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUserStatNotify)
  SharedDtor();
}

void IMUserStatNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_stat_;
  }
}

void IMUserStatNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUserStatNotify& IMUserStatNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUserStatNotify* IMUserStatNotify::default_instance_ = NULL;

IMUserStatNotify* IMUserStatNotify::New() const {
  return new IMUserStatNotify;
}

void IMUserStatNotify::Clear() {
  if (has_user_stat()) {
    if (user_stat_ != NULL) user_stat_->::IM::BaseDefine::UserStat::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUserStatNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUserStatNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.BaseDefine.UserStat user_stat = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_stat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUserStatNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUserStatNotify)
  return false;
#undef DO_
}

void IMUserStatNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUserStatNotify)
  // required .IM.BaseDefine.UserStat user_stat = 1;
  if (has_user_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->user_stat(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUserStatNotify)
}

int IMUserStatNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.BaseDefine.UserStat user_stat = 1;
    if (has_user_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_stat());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserStatNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUserStatNotify*>(&from));
}

void IMUserStatNotify::MergeFrom(const IMUserStatNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_stat()) {
      mutable_user_stat()->::IM::BaseDefine::UserStat::MergeFrom(from.user_stat());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUserStatNotify::CopyFrom(const IMUserStatNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserStatNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_stat()) {
    if (!this->user_stat().IsInitialized()) return false;
  }
  return true;
}

void IMUserStatNotify::Swap(IMUserStatNotify* other) {
  if (other != this) {
    std::swap(user_stat_, other->user_stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUserStatNotify::GetTypeName() const {
  return "IM.Buddy.IMUserStatNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUsersInfoReq::kUserIdFieldNumber;
const int IMUsersInfoReq::kUserIdListFieldNumber;
const int IMUsersInfoReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUsersInfoReq::IMUsersInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUsersInfoReq)
}

void IMUsersInfoReq::InitAsDefaultInstance() {
}

IMUsersInfoReq::IMUsersInfoReq(const IMUsersInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUsersInfoReq)
}

void IMUsersInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUsersInfoReq::~IMUsersInfoReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUsersInfoReq)
  SharedDtor();
}

void IMUsersInfoReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUsersInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersInfoReq& IMUsersInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUsersInfoReq* IMUsersInfoReq::default_instance_ = NULL;

IMUsersInfoReq* IMUsersInfoReq::New() const {
  return new IMUsersInfoReq;
}

void IMUsersInfoReq::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUsersInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUsersInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id_list;
        break;
      }

      // repeated uint32 user_id_list = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_user_id_list())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUsersInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUsersInfoReq)
  return false;
#undef DO_
}

void IMUsersInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUsersInfoReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated uint32 user_id_list = 2;
  for (int i = 0; i < this->user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->user_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUsersInfoReq)
}

int IMUsersInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 user_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_id_list(i));
    }
    total_size += 1 * this->user_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersInfoReq*>(&from));
}

void IMUsersInfoReq::MergeFrom(const IMUsersInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_list_.MergeFrom(from.user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUsersInfoReq::CopyFrom(const IMUsersInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMUsersInfoReq::Swap(IMUsersInfoReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    user_id_list_.Swap(&other->user_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUsersInfoReq::GetTypeName() const {
  return "IM.Buddy.IMUsersInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUsersInfoRsp::kUserIdFieldNumber;
const int IMUsersInfoRsp::kUserInfoListFieldNumber;
const int IMUsersInfoRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUsersInfoRsp::IMUsersInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUsersInfoRsp)
}

void IMUsersInfoRsp::InitAsDefaultInstance() {
}

IMUsersInfoRsp::IMUsersInfoRsp(const IMUsersInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUsersInfoRsp)
}

void IMUsersInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUsersInfoRsp::~IMUsersInfoRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUsersInfoRsp)
  SharedDtor();
}

void IMUsersInfoRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUsersInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersInfoRsp& IMUsersInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUsersInfoRsp* IMUsersInfoRsp::default_instance_ = NULL;

IMUsersInfoRsp* IMUsersInfoRsp::New() const {
  return new IMUsersInfoRsp;
}

void IMUsersInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  user_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUsersInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUsersInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_info_list;
        break;
      }

      // repeated .IM.BaseDefine.UserInfo user_info_list = 2;
      case 2: {
        if (tag == 18) {
         parse_user_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_info_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUsersInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUsersInfoRsp)
  return false;
#undef DO_
}

void IMUsersInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUsersInfoRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.UserInfo user_info_list = 2;
  for (int i = 0; i < this->user_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_info_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUsersInfoRsp)
}

int IMUsersInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.UserInfo user_info_list = 2;
  total_size += 1 * this->user_info_list_size();
  for (int i = 0; i < this->user_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_info_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersInfoRsp*>(&from));
}

void IMUsersInfoRsp::MergeFrom(const IMUsersInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_info_list_.MergeFrom(from.user_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUsersInfoRsp::CopyFrom(const IMUsersInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user_info_list())) return false;
  return true;
}

void IMUsersInfoRsp::Swap(IMUsersInfoRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    user_info_list_.Swap(&other->user_info_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUsersInfoRsp::GetTypeName() const {
  return "IM.Buddy.IMUsersInfoRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMRemoveSessionReq::kUserIdFieldNumber;
const int IMRemoveSessionReq::kSessionTypeFieldNumber;
const int IMRemoveSessionReq::kSessionIdFieldNumber;
const int IMRemoveSessionReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMRemoveSessionReq::IMRemoveSessionReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMRemoveSessionReq)
}

void IMRemoveSessionReq::InitAsDefaultInstance() {
}

IMRemoveSessionReq::IMRemoveSessionReq(const IMRemoveSessionReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMRemoveSessionReq)
}

void IMRemoveSessionReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMRemoveSessionReq::~IMRemoveSessionReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMRemoveSessionReq)
  SharedDtor();
}

void IMRemoveSessionReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMRemoveSessionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRemoveSessionReq& IMRemoveSessionReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMRemoveSessionReq* IMRemoveSessionReq::default_instance_ = NULL;

IMRemoveSessionReq* IMRemoveSessionReq::New() const {
  return new IMRemoveSessionReq;
}

void IMRemoveSessionReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    user_id_ = 0u;
    session_type_ = 1;
    session_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMRemoveSessionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMRemoveSessionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMRemoveSessionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMRemoveSessionReq)
  return false;
#undef DO_
}

void IMRemoveSessionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMRemoveSessionReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMRemoveSessionReq)
}

int IMRemoveSessionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRemoveSessionReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRemoveSessionReq*>(&from));
}

void IMRemoveSessionReq::MergeFrom(const IMRemoveSessionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMRemoveSessionReq::CopyFrom(const IMRemoveSessionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRemoveSessionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMRemoveSessionReq::Swap(IMRemoveSessionReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMRemoveSessionReq::GetTypeName() const {
  return "IM.Buddy.IMRemoveSessionReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMRemoveSessionRsp::kUserIdFieldNumber;
const int IMRemoveSessionRsp::kResultCodeFieldNumber;
const int IMRemoveSessionRsp::kSessionTypeFieldNumber;
const int IMRemoveSessionRsp::kSessionIdFieldNumber;
const int IMRemoveSessionRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMRemoveSessionRsp::IMRemoveSessionRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMRemoveSessionRsp)
}

void IMRemoveSessionRsp::InitAsDefaultInstance() {
}

IMRemoveSessionRsp::IMRemoveSessionRsp(const IMRemoveSessionRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMRemoveSessionRsp)
}

void IMRemoveSessionRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMRemoveSessionRsp::~IMRemoveSessionRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMRemoveSessionRsp)
  SharedDtor();
}

void IMRemoveSessionRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMRemoveSessionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRemoveSessionRsp& IMRemoveSessionRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMRemoveSessionRsp* IMRemoveSessionRsp::default_instance_ = NULL;

IMRemoveSessionRsp* IMRemoveSessionRsp::New() const {
  return new IMRemoveSessionRsp;
}

void IMRemoveSessionRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMRemoveSessionRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_id_, result_code_);
    session_type_ = 1;
    session_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMRemoveSessionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMRemoveSessionRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 3;
      case 3: {
        if (tag == 24) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 4;
      case 4: {
        if (tag == 32) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMRemoveSessionRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMRemoveSessionRsp)
  return false;
#undef DO_
}

void IMRemoveSessionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMRemoveSessionRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 3;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->session_type(), output);
  }

  // required uint32 session_id = 4;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->session_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMRemoveSessionRsp)
}

int IMRemoveSessionRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required .IM.BaseDefine.SessionType session_type = 3;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 4;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRemoveSessionRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRemoveSessionRsp*>(&from));
}

void IMRemoveSessionRsp::MergeFrom(const IMRemoveSessionRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMRemoveSessionRsp::CopyFrom(const IMRemoveSessionRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRemoveSessionRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMRemoveSessionRsp::Swap(IMRemoveSessionRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMRemoveSessionRsp::GetTypeName() const {
  return "IM.Buddy.IMRemoveSessionRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMAllUserReq::kUserIdFieldNumber;
const int IMAllUserReq::kLatestUpdateTimeFieldNumber;
const int IMAllUserReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMAllUserReq::IMAllUserReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMAllUserReq)
}

void IMAllUserReq::InitAsDefaultInstance() {
}

IMAllUserReq::IMAllUserReq(const IMAllUserReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMAllUserReq)
}

void IMAllUserReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  latest_update_time_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMAllUserReq::~IMAllUserReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMAllUserReq)
  SharedDtor();
}

void IMAllUserReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMAllUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMAllUserReq& IMAllUserReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMAllUserReq* IMAllUserReq::default_instance_ = NULL;

IMAllUserReq* IMAllUserReq::New() const {
  return new IMAllUserReq;
}

void IMAllUserReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMAllUserReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, latest_update_time_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMAllUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMAllUserReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_latest_update_time;
        break;
      }

      // required uint32 latest_update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_latest_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
          set_has_latest_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMAllUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMAllUserReq)
  return false;
#undef DO_
}

void IMAllUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMAllUserReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 latest_update_time = 2;
  if (has_latest_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMAllUserReq)
}

int IMAllUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 latest_update_time = 2;
    if (has_latest_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMAllUserReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMAllUserReq*>(&from));
}

void IMAllUserReq::MergeFrom(const IMAllUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_latest_update_time()) {
      set_latest_update_time(from.latest_update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMAllUserReq::CopyFrom(const IMAllUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMAllUserReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMAllUserReq::Swap(IMAllUserReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(latest_update_time_, other->latest_update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMAllUserReq::GetTypeName() const {
  return "IM.Buddy.IMAllUserReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMAllUserRsp::kUserIdFieldNumber;
const int IMAllUserRsp::kLatestUpdateTimeFieldNumber;
const int IMAllUserRsp::kUserListFieldNumber;
const int IMAllUserRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMAllUserRsp::IMAllUserRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMAllUserRsp)
}

void IMAllUserRsp::InitAsDefaultInstance() {
}

IMAllUserRsp::IMAllUserRsp(const IMAllUserRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMAllUserRsp)
}

void IMAllUserRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  latest_update_time_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMAllUserRsp::~IMAllUserRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMAllUserRsp)
  SharedDtor();
}

void IMAllUserRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMAllUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMAllUserRsp& IMAllUserRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMAllUserRsp* IMAllUserRsp::default_instance_ = NULL;

IMAllUserRsp* IMAllUserRsp::New() const {
  return new IMAllUserRsp;
}

void IMAllUserRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMAllUserRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(user_id_, latest_update_time_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMAllUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMAllUserRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_latest_update_time;
        break;
      }

      // required uint32 latest_update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_latest_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
          set_has_latest_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_list;
        break;
      }

      // repeated .IM.BaseDefine.UserInfo user_list = 3;
      case 3: {
        if (tag == 26) {
         parse_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMAllUserRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMAllUserRsp)
  return false;
#undef DO_
}

void IMAllUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMAllUserRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 latest_update_time = 2;
  if (has_latest_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // repeated .IM.BaseDefine.UserInfo user_list = 3;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->user_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMAllUserRsp)
}

int IMAllUserRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 latest_update_time = 2;
    if (has_latest_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.UserInfo user_list = 3;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMAllUserRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMAllUserRsp*>(&from));
}

void IMAllUserRsp::MergeFrom(const IMAllUserRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_latest_update_time()) {
      set_latest_update_time(from.latest_update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMAllUserRsp::CopyFrom(const IMAllUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMAllUserRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user_list())) return false;
  return true;
}

void IMAllUserRsp::Swap(IMAllUserRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(latest_update_time_, other->latest_update_time_);
    user_list_.Swap(&other->user_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMAllUserRsp::GetTypeName() const {
  return "IM.Buddy.IMAllUserRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUsersStatReq::kUserIdFieldNumber;
const int IMUsersStatReq::kUserIdListFieldNumber;
const int IMUsersStatReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUsersStatReq::IMUsersStatReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUsersStatReq)
}

void IMUsersStatReq::InitAsDefaultInstance() {
}

IMUsersStatReq::IMUsersStatReq(const IMUsersStatReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUsersStatReq)
}

void IMUsersStatReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUsersStatReq::~IMUsersStatReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUsersStatReq)
  SharedDtor();
}

void IMUsersStatReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUsersStatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersStatReq& IMUsersStatReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUsersStatReq* IMUsersStatReq::default_instance_ = NULL;

IMUsersStatReq* IMUsersStatReq::New() const {
  return new IMUsersStatReq;
}

void IMUsersStatReq::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUsersStatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUsersStatReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id_list;
        break;
      }

      // repeated uint32 user_id_list = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_user_id_list())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUsersStatReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUsersStatReq)
  return false;
#undef DO_
}

void IMUsersStatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUsersStatReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated uint32 user_id_list = 2;
  for (int i = 0; i < this->user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->user_id_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUsersStatReq)
}

int IMUsersStatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 user_id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_id_list(i));
    }
    total_size += 1 * this->user_id_list_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersStatReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersStatReq*>(&from));
}

void IMUsersStatReq::MergeFrom(const IMUsersStatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_list_.MergeFrom(from.user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUsersStatReq::CopyFrom(const IMUsersStatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersStatReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IMUsersStatReq::Swap(IMUsersStatReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    user_id_list_.Swap(&other->user_id_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUsersStatReq::GetTypeName() const {
  return "IM.Buddy.IMUsersStatReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMUsersStatRsp::kUserIdFieldNumber;
const int IMUsersStatRsp::kUserStatListFieldNumber;
const int IMUsersStatRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMUsersStatRsp::IMUsersStatRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMUsersStatRsp)
}

void IMUsersStatRsp::InitAsDefaultInstance() {
}

IMUsersStatRsp::IMUsersStatRsp(const IMUsersStatRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMUsersStatRsp)
}

void IMUsersStatRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMUsersStatRsp::~IMUsersStatRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMUsersStatRsp)
  SharedDtor();
}

void IMUsersStatRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMUsersStatRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMUsersStatRsp& IMUsersStatRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMUsersStatRsp* IMUsersStatRsp::default_instance_ = NULL;

IMUsersStatRsp* IMUsersStatRsp::New() const {
  return new IMUsersStatRsp;
}

void IMUsersStatRsp::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  user_stat_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMUsersStatRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMUsersStatRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_stat_list;
        break;
      }

      // repeated .IM.BaseDefine.UserStat user_stat_list = 2;
      case 2: {
        if (tag == 18) {
         parse_user_stat_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_stat_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_stat_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMUsersStatRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMUsersStatRsp)
  return false;
#undef DO_
}

void IMUsersStatRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMUsersStatRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated .IM.BaseDefine.UserStat user_stat_list = 2;
  for (int i = 0; i < this->user_stat_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_stat_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMUsersStatRsp)
}

int IMUsersStatRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.UserStat user_stat_list = 2;
  total_size += 1 * this->user_stat_list_size();
  for (int i = 0; i < this->user_stat_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_stat_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUsersStatRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMUsersStatRsp*>(&from));
}

void IMUsersStatRsp::MergeFrom(const IMUsersStatRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_stat_list_.MergeFrom(from.user_stat_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMUsersStatRsp::CopyFrom(const IMUsersStatRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUsersStatRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user_stat_list())) return false;
  return true;
}

void IMUsersStatRsp::Swap(IMUsersStatRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    user_stat_list_.Swap(&other->user_stat_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMUsersStatRsp::GetTypeName() const {
  return "IM.Buddy.IMUsersStatRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMChangeAvatarReq::kUserIdFieldNumber;
const int IMChangeAvatarReq::kAvatarUrlFieldNumber;
const int IMChangeAvatarReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMChangeAvatarReq::IMChangeAvatarReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMChangeAvatarReq)
}

void IMChangeAvatarReq::InitAsDefaultInstance() {
}

IMChangeAvatarReq::IMChangeAvatarReq(const IMChangeAvatarReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMChangeAvatarReq)
}

void IMChangeAvatarReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMChangeAvatarReq::~IMChangeAvatarReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMChangeAvatarReq)
  SharedDtor();
}

void IMChangeAvatarReq::SharedDtor() {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMChangeAvatarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMChangeAvatarReq& IMChangeAvatarReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMChangeAvatarReq* IMChangeAvatarReq::default_instance_ = NULL;

IMChangeAvatarReq* IMChangeAvatarReq::New() const {
  return new IMChangeAvatarReq;
}

void IMChangeAvatarReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = 0u;
    if (has_avatar_url()) {
      if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_url_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMChangeAvatarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMChangeAvatarReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_avatar_url;
        break;
      }

      // required string avatar_url = 2;
      case 2: {
        if (tag == 18) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMChangeAvatarReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMChangeAvatarReq)
  return false;
#undef DO_
}

void IMChangeAvatarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMChangeAvatarReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required string avatar_url = 2;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->avatar_url(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMChangeAvatarReq)
}

int IMChangeAvatarReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string avatar_url = 2;
    if (has_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_url());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMChangeAvatarReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMChangeAvatarReq*>(&from));
}

void IMChangeAvatarReq::MergeFrom(const IMChangeAvatarReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_avatar_url()) {
      set_avatar_url(from.avatar_url());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMChangeAvatarReq::CopyFrom(const IMChangeAvatarReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMChangeAvatarReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMChangeAvatarReq::Swap(IMChangeAvatarReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(avatar_url_, other->avatar_url_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMChangeAvatarReq::GetTypeName() const {
  return "IM.Buddy.IMChangeAvatarReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMChangeAvatarRsp::kUserIdFieldNumber;
const int IMChangeAvatarRsp::kResultCodeFieldNumber;
const int IMChangeAvatarRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMChangeAvatarRsp::IMChangeAvatarRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMChangeAvatarRsp)
}

void IMChangeAvatarRsp::InitAsDefaultInstance() {
}

IMChangeAvatarRsp::IMChangeAvatarRsp(const IMChangeAvatarRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMChangeAvatarRsp)
}

void IMChangeAvatarRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMChangeAvatarRsp::~IMChangeAvatarRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMChangeAvatarRsp)
  SharedDtor();
}

void IMChangeAvatarRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMChangeAvatarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMChangeAvatarRsp& IMChangeAvatarRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMChangeAvatarRsp* IMChangeAvatarRsp::default_instance_ = NULL;

IMChangeAvatarRsp* IMChangeAvatarRsp::New() const {
  return new IMChangeAvatarRsp;
}

void IMChangeAvatarRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMChangeAvatarRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, result_code_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMChangeAvatarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMChangeAvatarRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMChangeAvatarRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMChangeAvatarRsp)
  return false;
#undef DO_
}

void IMChangeAvatarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMChangeAvatarRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMChangeAvatarRsp)
}

int IMChangeAvatarRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMChangeAvatarRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMChangeAvatarRsp*>(&from));
}

void IMChangeAvatarRsp::MergeFrom(const IMChangeAvatarRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMChangeAvatarRsp::CopyFrom(const IMChangeAvatarRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMChangeAvatarRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMChangeAvatarRsp::Swap(IMChangeAvatarRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMChangeAvatarRsp::GetTypeName() const {
  return "IM.Buddy.IMChangeAvatarRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMPCLoginStatusNotify::kUserIdFieldNumber;
const int IMPCLoginStatusNotify::kLoginStatFieldNumber;
#endif  // !_MSC_VER

IMPCLoginStatusNotify::IMPCLoginStatusNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMPCLoginStatusNotify)
}

void IMPCLoginStatusNotify::InitAsDefaultInstance() {
}

IMPCLoginStatusNotify::IMPCLoginStatusNotify(const IMPCLoginStatusNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMPCLoginStatusNotify)
}

void IMPCLoginStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  login_stat_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMPCLoginStatusNotify::~IMPCLoginStatusNotify() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMPCLoginStatusNotify)
  SharedDtor();
}

void IMPCLoginStatusNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMPCLoginStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMPCLoginStatusNotify& IMPCLoginStatusNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMPCLoginStatusNotify* IMPCLoginStatusNotify::default_instance_ = NULL;

IMPCLoginStatusNotify* IMPCLoginStatusNotify::New() const {
  return new IMPCLoginStatusNotify;
}

void IMPCLoginStatusNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = 0u;
    login_stat_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMPCLoginStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMPCLoginStatusNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_login_stat;
        break;
      }

      // required .IM.BaseDefine.UserStatType login_stat = 2;
      case 2: {
        if (tag == 16) {
         parse_login_stat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::UserStatType_IsValid(value)) {
            set_login_stat(static_cast< ::IM::BaseDefine::UserStatType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMPCLoginStatusNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMPCLoginStatusNotify)
  return false;
#undef DO_
}

void IMPCLoginStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMPCLoginStatusNotify)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.UserStatType login_stat = 2;
  if (has_login_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->login_stat(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMPCLoginStatusNotify)
}

int IMPCLoginStatusNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.UserStatType login_stat = 2;
    if (has_login_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->login_stat());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMPCLoginStatusNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMPCLoginStatusNotify*>(&from));
}

void IMPCLoginStatusNotify::MergeFrom(const IMPCLoginStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_login_stat()) {
      set_login_stat(from.login_stat());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMPCLoginStatusNotify::CopyFrom(const IMPCLoginStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMPCLoginStatusNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMPCLoginStatusNotify::Swap(IMPCLoginStatusNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(login_stat_, other->login_stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMPCLoginStatusNotify::GetTypeName() const {
  return "IM.Buddy.IMPCLoginStatusNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMRemoveSessionNotify::kUserIdFieldNumber;
const int IMRemoveSessionNotify::kSessionTypeFieldNumber;
const int IMRemoveSessionNotify::kSessionIdFieldNumber;
#endif  // !_MSC_VER

IMRemoveSessionNotify::IMRemoveSessionNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMRemoveSessionNotify)
}

void IMRemoveSessionNotify::InitAsDefaultInstance() {
}

IMRemoveSessionNotify::IMRemoveSessionNotify(const IMRemoveSessionNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMRemoveSessionNotify)
}

void IMRemoveSessionNotify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  session_type_ = 1;
  session_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMRemoveSessionNotify::~IMRemoveSessionNotify() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMRemoveSessionNotify)
  SharedDtor();
}

void IMRemoveSessionNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMRemoveSessionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMRemoveSessionNotify& IMRemoveSessionNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMRemoveSessionNotify* IMRemoveSessionNotify::default_instance_ = NULL;

IMRemoveSessionNotify* IMRemoveSessionNotify::New() const {
  return new IMRemoveSessionNotify;
}

void IMRemoveSessionNotify::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = 0u;
    session_type_ = 1;
    session_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMRemoveSessionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMRemoveSessionNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_type;
        break;
      }

      // required .IM.BaseDefine.SessionType session_type = 2;
      case 2: {
        if (tag == 16) {
         parse_session_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::SessionType_IsValid(value)) {
            set_session_type(static_cast< ::IM::BaseDefine::SessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // required uint32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMRemoveSessionNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMRemoveSessionNotify)
  return false;
#undef DO_
}

void IMRemoveSessionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMRemoveSessionNotify)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.SessionType session_type = 2;
  if (has_session_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // required uint32 session_id = 3;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->session_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMRemoveSessionNotify)
}

int IMRemoveSessionNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.SessionType session_type = 2;
    if (has_session_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // required uint32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRemoveSessionNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMRemoveSessionNotify*>(&from));
}

void IMRemoveSessionNotify::MergeFrom(const IMRemoveSessionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_type()) {
      set_session_type(from.session_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMRemoveSessionNotify::CopyFrom(const IMRemoveSessionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRemoveSessionNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMRemoveSessionNotify::Swap(IMRemoveSessionNotify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_type_, other->session_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMRemoveSessionNotify::GetTypeName() const {
  return "IM.Buddy.IMRemoveSessionNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDepartmentReq::kUserIdFieldNumber;
const int IMDepartmentReq::kLatestUpdateTimeFieldNumber;
const int IMDepartmentReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDepartmentReq::IMDepartmentReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMDepartmentReq)
}

void IMDepartmentReq::InitAsDefaultInstance() {
}

IMDepartmentReq::IMDepartmentReq(const IMDepartmentReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMDepartmentReq)
}

void IMDepartmentReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  latest_update_time_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDepartmentReq::~IMDepartmentReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMDepartmentReq)
  SharedDtor();
}

void IMDepartmentReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDepartmentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDepartmentReq& IMDepartmentReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMDepartmentReq* IMDepartmentReq::default_instance_ = NULL;

IMDepartmentReq* IMDepartmentReq::New() const {
  return new IMDepartmentReq;
}

void IMDepartmentReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDepartmentReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, latest_update_time_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDepartmentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMDepartmentReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_latest_update_time;
        break;
      }

      // required uint32 latest_update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_latest_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
          set_has_latest_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMDepartmentReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMDepartmentReq)
  return false;
#undef DO_
}

void IMDepartmentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMDepartmentReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 latest_update_time = 2;
  if (has_latest_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMDepartmentReq)
}

int IMDepartmentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 latest_update_time = 2;
    if (has_latest_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDepartmentReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDepartmentReq*>(&from));
}

void IMDepartmentReq::MergeFrom(const IMDepartmentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_latest_update_time()) {
      set_latest_update_time(from.latest_update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDepartmentReq::CopyFrom(const IMDepartmentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDepartmentReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMDepartmentReq::Swap(IMDepartmentReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(latest_update_time_, other->latest_update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDepartmentReq::GetTypeName() const {
  return "IM.Buddy.IMDepartmentReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMDepartmentRsp::kUserIdFieldNumber;
const int IMDepartmentRsp::kLatestUpdateTimeFieldNumber;
const int IMDepartmentRsp::kDeptListFieldNumber;
const int IMDepartmentRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMDepartmentRsp::IMDepartmentRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMDepartmentRsp)
}

void IMDepartmentRsp::InitAsDefaultInstance() {
}

IMDepartmentRsp::IMDepartmentRsp(const IMDepartmentRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMDepartmentRsp)
}

void IMDepartmentRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  latest_update_time_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMDepartmentRsp::~IMDepartmentRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMDepartmentRsp)
  SharedDtor();
}

void IMDepartmentRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMDepartmentRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMDepartmentRsp& IMDepartmentRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMDepartmentRsp* IMDepartmentRsp::default_instance_ = NULL;

IMDepartmentRsp* IMDepartmentRsp::New() const {
  return new IMDepartmentRsp;
}

void IMDepartmentRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMDepartmentRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(user_id_, latest_update_time_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  dept_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMDepartmentRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMDepartmentRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_latest_update_time;
        break;
      }

      // required uint32 latest_update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_latest_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &latest_update_time_)));
          set_has_latest_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dept_list;
        break;
      }

      // repeated .IM.BaseDefine.DepartInfo dept_list = 3;
      case 3: {
        if (tag == 26) {
         parse_dept_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dept_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_dept_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMDepartmentRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMDepartmentRsp)
  return false;
#undef DO_
}

void IMDepartmentRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMDepartmentRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 latest_update_time = 2;
  if (has_latest_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->latest_update_time(), output);
  }

  // repeated .IM.BaseDefine.DepartInfo dept_list = 3;
  for (int i = 0; i < this->dept_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->dept_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMDepartmentRsp)
}

int IMDepartmentRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 latest_update_time = 2;
    if (has_latest_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->latest_update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.DepartInfo dept_list = 3;
  total_size += 1 * this->dept_list_size();
  for (int i = 0; i < this->dept_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dept_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDepartmentRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMDepartmentRsp*>(&from));
}

void IMDepartmentRsp::MergeFrom(const IMDepartmentRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  dept_list_.MergeFrom(from.dept_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_latest_update_time()) {
      set_latest_update_time(from.latest_update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMDepartmentRsp::CopyFrom(const IMDepartmentRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDepartmentRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->dept_list())) return false;
  return true;
}

void IMDepartmentRsp::Swap(IMDepartmentRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(latest_update_time_, other->latest_update_time_);
    dept_list_.Swap(&other->dept_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMDepartmentRsp::GetTypeName() const {
  return "IM.Buddy.IMDepartmentRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMAvatarChangedNotify::kChangedUserIdFieldNumber;
const int IMAvatarChangedNotify::kAvatarUrlFieldNumber;
#endif  // !_MSC_VER

IMAvatarChangedNotify::IMAvatarChangedNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMAvatarChangedNotify)
}

void IMAvatarChangedNotify::InitAsDefaultInstance() {
}

IMAvatarChangedNotify::IMAvatarChangedNotify(const IMAvatarChangedNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMAvatarChangedNotify)
}

void IMAvatarChangedNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  changed_user_id_ = 0u;
  avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMAvatarChangedNotify::~IMAvatarChangedNotify() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMAvatarChangedNotify)
  SharedDtor();
}

void IMAvatarChangedNotify::SharedDtor() {
  if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avatar_url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMAvatarChangedNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMAvatarChangedNotify& IMAvatarChangedNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMAvatarChangedNotify* IMAvatarChangedNotify::default_instance_ = NULL;

IMAvatarChangedNotify* IMAvatarChangedNotify::New() const {
  return new IMAvatarChangedNotify;
}

void IMAvatarChangedNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    changed_user_id_ = 0u;
    if (has_avatar_url()) {
      if (avatar_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avatar_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMAvatarChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMAvatarChangedNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 changed_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &changed_user_id_)));
          set_has_changed_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_avatar_url;
        break;
      }

      // required string avatar_url = 2;
      case 2: {
        if (tag == 18) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMAvatarChangedNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMAvatarChangedNotify)
  return false;
#undef DO_
}

void IMAvatarChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMAvatarChangedNotify)
  // required uint32 changed_user_id = 1;
  if (has_changed_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->changed_user_id(), output);
  }

  // required string avatar_url = 2;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->avatar_url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMAvatarChangedNotify)
}

int IMAvatarChangedNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 changed_user_id = 1;
    if (has_changed_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->changed_user_id());
    }

    // required string avatar_url = 2;
    if (has_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_url());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMAvatarChangedNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMAvatarChangedNotify*>(&from));
}

void IMAvatarChangedNotify::MergeFrom(const IMAvatarChangedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_changed_user_id()) {
      set_changed_user_id(from.changed_user_id());
    }
    if (from.has_avatar_url()) {
      set_avatar_url(from.avatar_url());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMAvatarChangedNotify::CopyFrom(const IMAvatarChangedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMAvatarChangedNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMAvatarChangedNotify::Swap(IMAvatarChangedNotify* other) {
  if (other != this) {
    std::swap(changed_user_id_, other->changed_user_id_);
    std::swap(avatar_url_, other->avatar_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMAvatarChangedNotify::GetTypeName() const {
  return "IM.Buddy.IMAvatarChangedNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int IMChangeSignInfoReq::kUserIdFieldNumber;
const int IMChangeSignInfoReq::kSignInfoFieldNumber;
const int IMChangeSignInfoReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMChangeSignInfoReq::IMChangeSignInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMChangeSignInfoReq)
}

void IMChangeSignInfoReq::InitAsDefaultInstance() {
}

IMChangeSignInfoReq::IMChangeSignInfoReq(const IMChangeSignInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMChangeSignInfoReq)
}

void IMChangeSignInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  sign_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMChangeSignInfoReq::~IMChangeSignInfoReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMChangeSignInfoReq)
  SharedDtor();
}

void IMChangeSignInfoReq::SharedDtor() {
  if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_info_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMChangeSignInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMChangeSignInfoReq& IMChangeSignInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMChangeSignInfoReq* IMChangeSignInfoReq::default_instance_ = NULL;

IMChangeSignInfoReq* IMChangeSignInfoReq::New() const {
  return new IMChangeSignInfoReq;
}

void IMChangeSignInfoReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = 0u;
    if (has_sign_info()) {
      if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_info_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMChangeSignInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMChangeSignInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sign_info;
        break;
      }

      // required string sign_info = 2;
      case 2: {
        if (tag == 18) {
         parse_sign_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMChangeSignInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMChangeSignInfoReq)
  return false;
#undef DO_
}

void IMChangeSignInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMChangeSignInfoReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required string sign_info = 2;
  if (has_sign_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sign_info(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMChangeSignInfoReq)
}

int IMChangeSignInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string sign_info = 2;
    if (has_sign_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign_info());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMChangeSignInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMChangeSignInfoReq*>(&from));
}

void IMChangeSignInfoReq::MergeFrom(const IMChangeSignInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_sign_info()) {
      set_sign_info(from.sign_info());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMChangeSignInfoReq::CopyFrom(const IMChangeSignInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMChangeSignInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMChangeSignInfoReq::Swap(IMChangeSignInfoReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(sign_info_, other->sign_info_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMChangeSignInfoReq::GetTypeName() const {
  return "IM.Buddy.IMChangeSignInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMChangeSignInfoRsp::kUserIdFieldNumber;
const int IMChangeSignInfoRsp::kResultCodeFieldNumber;
const int IMChangeSignInfoRsp::kSignInfoFieldNumber;
const int IMChangeSignInfoRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMChangeSignInfoRsp::IMChangeSignInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMChangeSignInfoRsp)
}

void IMChangeSignInfoRsp::InitAsDefaultInstance() {
}

IMChangeSignInfoRsp::IMChangeSignInfoRsp(const IMChangeSignInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMChangeSignInfoRsp)
}

void IMChangeSignInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  sign_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMChangeSignInfoRsp::~IMChangeSignInfoRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMChangeSignInfoRsp)
  SharedDtor();
}

void IMChangeSignInfoRsp::SharedDtor() {
  if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_info_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMChangeSignInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMChangeSignInfoRsp& IMChangeSignInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMChangeSignInfoRsp* IMChangeSignInfoRsp::default_instance_ = NULL;

IMChangeSignInfoRsp* IMChangeSignInfoRsp::New() const {
  return new IMChangeSignInfoRsp;
}

void IMChangeSignInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMChangeSignInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, result_code_);
    if (has_sign_info()) {
      if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_info_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMChangeSignInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMChangeSignInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sign_info;
        break;
      }

      // optional string sign_info = 3;
      case 3: {
        if (tag == 26) {
         parse_sign_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMChangeSignInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMChangeSignInfoRsp)
  return false;
#undef DO_
}

void IMChangeSignInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMChangeSignInfoRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // optional string sign_info = 3;
  if (has_sign_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sign_info(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMChangeSignInfoRsp)
}

int IMChangeSignInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional string sign_info = 3;
    if (has_sign_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign_info());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMChangeSignInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMChangeSignInfoRsp*>(&from));
}

void IMChangeSignInfoRsp::MergeFrom(const IMChangeSignInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_sign_info()) {
      set_sign_info(from.sign_info());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMChangeSignInfoRsp::CopyFrom(const IMChangeSignInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMChangeSignInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMChangeSignInfoRsp::Swap(IMChangeSignInfoRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(sign_info_, other->sign_info_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMChangeSignInfoRsp::GetTypeName() const {
  return "IM.Buddy.IMChangeSignInfoRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMSignInfoChangedNotify::kChangedUserIdFieldNumber;
const int IMSignInfoChangedNotify::kSignInfoFieldNumber;
#endif  // !_MSC_VER

IMSignInfoChangedNotify::IMSignInfoChangedNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.IMSignInfoChangedNotify)
}

void IMSignInfoChangedNotify::InitAsDefaultInstance() {
}

IMSignInfoChangedNotify::IMSignInfoChangedNotify(const IMSignInfoChangedNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.IMSignInfoChangedNotify)
}

void IMSignInfoChangedNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  changed_user_id_ = 0u;
  sign_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMSignInfoChangedNotify::~IMSignInfoChangedNotify() {
  // @@protoc_insertion_point(destructor:IM.Buddy.IMSignInfoChangedNotify)
  SharedDtor();
}

void IMSignInfoChangedNotify::SharedDtor() {
  if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_info_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMSignInfoChangedNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMSignInfoChangedNotify& IMSignInfoChangedNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

IMSignInfoChangedNotify* IMSignInfoChangedNotify::default_instance_ = NULL;

IMSignInfoChangedNotify* IMSignInfoChangedNotify::New() const {
  return new IMSignInfoChangedNotify;
}

void IMSignInfoChangedNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    changed_user_id_ = 0u;
    if (has_sign_info()) {
      if (sign_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMSignInfoChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.IMSignInfoChangedNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 changed_user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &changed_user_id_)));
          set_has_changed_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sign_info;
        break;
      }

      // required string sign_info = 2;
      case 2: {
        if (tag == 18) {
         parse_sign_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.IMSignInfoChangedNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.IMSignInfoChangedNotify)
  return false;
#undef DO_
}

void IMSignInfoChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.IMSignInfoChangedNotify)
  // required uint32 changed_user_id = 1;
  if (has_changed_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->changed_user_id(), output);
  }

  // required string sign_info = 2;
  if (has_sign_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sign_info(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.IMSignInfoChangedNotify)
}

int IMSignInfoChangedNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 changed_user_id = 1;
    if (has_changed_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->changed_user_id());
    }

    // required string sign_info = 2;
    if (has_sign_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign_info());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMSignInfoChangedNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMSignInfoChangedNotify*>(&from));
}

void IMSignInfoChangedNotify::MergeFrom(const IMSignInfoChangedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_changed_user_id()) {
      set_changed_user_id(from.changed_user_id());
    }
    if (from.has_sign_info()) {
      set_sign_info(from.sign_info());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMSignInfoChangedNotify::CopyFrom(const IMSignInfoChangedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMSignInfoChangedNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMSignInfoChangedNotify::Swap(IMSignInfoChangedNotify* other) {
  if (other != this) {
    std::swap(changed_user_id_, other->changed_user_id_);
    std::swap(sign_info_, other->sign_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMSignInfoChangedNotify::GetTypeName() const {
  return "IM.Buddy.IMSignInfoChangedNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int TravelToolInfo::kIdFieldNumber;
const int TravelToolInfo::kTransportToolTypeFieldNumber;
const int TravelToolInfo::kNoFieldNumber;
const int TravelToolInfo::kPlaceFromCodeFieldNumber;
const int TravelToolInfo::kPlaceFromFieldNumber;
const int TravelToolInfo::kPlaceToCodeFieldNumber;
const int TravelToolInfo::kPlaceToFieldNumber;
const int TravelToolInfo::kTimeFromFieldNumber;
const int TravelToolInfo::kTimeToFieldNumber;
const int TravelToolInfo::kClassFieldNumber;
const int TravelToolInfo::kPriceFieldNumber;
#endif  // !_MSC_VER

TravelToolInfo::TravelToolInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.TravelToolInfo)
}

void TravelToolInfo::InitAsDefaultInstance() {
}

TravelToolInfo::TravelToolInfo(const TravelToolInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.TravelToolInfo)
}

void TravelToolInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  transport_tool_type_ = 0u;
  no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  place_from_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  place_from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  place_to_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  place_to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TravelToolInfo::~TravelToolInfo() {
  // @@protoc_insertion_point(destructor:IM.Buddy.TravelToolInfo)
  SharedDtor();
}

void TravelToolInfo::SharedDtor() {
  if (no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete no_;
  }
  if (place_from_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete place_from_code_;
  }
  if (place_from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete place_from_;
  }
  if (place_to_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete place_to_code_;
  }
  if (place_to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete place_to_;
  }
  if (time_from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_from_;
  }
  if (time_to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_to_;
  }
  if (class__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete class__;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TravelToolInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TravelToolInfo& TravelToolInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

TravelToolInfo* TravelToolInfo::default_instance_ = NULL;

TravelToolInfo* TravelToolInfo::New() const {
  return new TravelToolInfo;
}

void TravelToolInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TravelToolInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, transport_tool_type_);
    if (has_no()) {
      if (no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        no_->clear();
      }
    }
    if (has_place_from_code()) {
      if (place_from_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        place_from_code_->clear();
      }
    }
    if (has_place_from()) {
      if (place_from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        place_from_->clear();
      }
    }
    if (has_place_to_code()) {
      if (place_to_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        place_to_code_->clear();
      }
    }
    if (has_place_to()) {
      if (place_to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        place_to_->clear();
      }
    }
    if (has_time_from()) {
      if (time_from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_from_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_time_to()) {
      if (time_to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_to_->clear();
      }
    }
    if (has_class_()) {
      if (class__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        class__->clear();
      }
    }
    price_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TravelToolInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.TravelToolInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_transport_tool_type;
        break;
      }

      // required uint32 transport_tool_type = 2;
      case 2: {
        if (tag == 16) {
         parse_transport_tool_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transport_tool_type_)));
          set_has_transport_tool_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_no;
        break;
      }

      // required string no = 3;
      case 3: {
        if (tag == 26) {
         parse_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_place_from_code;
        break;
      }

      // required string place_from_code = 4;
      case 4: {
        if (tag == 34) {
         parse_place_from_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_place_from_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_place_from;
        break;
      }

      // required string place_from = 5;
      case 5: {
        if (tag == 42) {
         parse_place_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_place_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_place_to_code;
        break;
      }

      // required string place_to_code = 6;
      case 6: {
        if (tag == 50) {
         parse_place_to_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_place_to_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_place_to;
        break;
      }

      // required string place_to = 7;
      case 7: {
        if (tag == 58) {
         parse_place_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_place_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_time_from;
        break;
      }

      // required string time_from = 8;
      case 8: {
        if (tag == 66) {
         parse_time_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_time_to;
        break;
      }

      // required string time_to = 9;
      case 9: {
        if (tag == 74) {
         parse_time_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_class;
        break;
      }

      // required string class = 10;
      case 10: {
        if (tag == 82) {
         parse_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_price;
        break;
      }

      // required uint32 price = 11;
      case 11: {
        if (tag == 88) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.TravelToolInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.TravelToolInfo)
  return false;
#undef DO_
}

void TravelToolInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.TravelToolInfo)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 transport_tool_type = 2;
  if (has_transport_tool_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->transport_tool_type(), output);
  }

  // required string no = 3;
  if (has_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->no(), output);
  }

  // required string place_from_code = 4;
  if (has_place_from_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->place_from_code(), output);
  }

  // required string place_from = 5;
  if (has_place_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->place_from(), output);
  }

  // required string place_to_code = 6;
  if (has_place_to_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->place_to_code(), output);
  }

  // required string place_to = 7;
  if (has_place_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->place_to(), output);
  }

  // required string time_from = 8;
  if (has_time_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->time_from(), output);
  }

  // required string time_to = 9;
  if (has_time_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->time_to(), output);
  }

  // required string class = 10;
  if (has_class_()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->class_(), output);
  }

  // required uint32 price = 11;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->price(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.TravelToolInfo)
}

int TravelToolInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 transport_tool_type = 2;
    if (has_transport_tool_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transport_tool_type());
    }

    // required string no = 3;
    if (has_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->no());
    }

    // required string place_from_code = 4;
    if (has_place_from_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->place_from_code());
    }

    // required string place_from = 5;
    if (has_place_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->place_from());
    }

    // required string place_to_code = 6;
    if (has_place_to_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->place_to_code());
    }

    // required string place_to = 7;
    if (has_place_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->place_to());
    }

    // required string time_from = 8;
    if (has_time_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_from());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string time_to = 9;
    if (has_time_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_to());
    }

    // required string class = 10;
    if (has_class_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_());
    }

    // required uint32 price = 11;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TravelToolInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TravelToolInfo*>(&from));
}

void TravelToolInfo::MergeFrom(const TravelToolInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_transport_tool_type()) {
      set_transport_tool_type(from.transport_tool_type());
    }
    if (from.has_no()) {
      set_no(from.no());
    }
    if (from.has_place_from_code()) {
      set_place_from_code(from.place_from_code());
    }
    if (from.has_place_from()) {
      set_place_from(from.place_from());
    }
    if (from.has_place_to_code()) {
      set_place_to_code(from.place_to_code());
    }
    if (from.has_place_to()) {
      set_place_to(from.place_to());
    }
    if (from.has_time_from()) {
      set_time_from(from.time_from());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time_to()) {
      set_time_to(from.time_to());
    }
    if (from.has_class_()) {
      set_class_(from.class_());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TravelToolInfo::CopyFrom(const TravelToolInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TravelToolInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void TravelToolInfo::Swap(TravelToolInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(transport_tool_type_, other->transport_tool_type_);
    std::swap(no_, other->no_);
    std::swap(place_from_code_, other->place_from_code_);
    std::swap(place_from_, other->place_from_);
    std::swap(place_to_code_, other->place_to_code_);
    std::swap(place_to_, other->place_to_);
    std::swap(time_from_, other->time_from_);
    std::swap(time_to_, other->time_to_);
    std::swap(class__, other->class__);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TravelToolInfo::GetTypeName() const {
  return "IM.Buddy.TravelToolInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int BasicInfo::kDateFromFieldNumber;
const int BasicInfo::kDateToFieldNumber;
const int BasicInfo::kPlaceToCodeFieldNumber;
const int BasicInfo::kPersonNumFieldNumber;
const int BasicInfo::kPlaceFromCodeFieldNumber;
const int BasicInfo::kPlaceBackCodeFieldNumber;
#endif  // !_MSC_VER

BasicInfo::BasicInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.BasicInfo)
}

void BasicInfo::InitAsDefaultInstance() {
}

BasicInfo::BasicInfo(const BasicInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.BasicInfo)
}

void BasicInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  date_from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  place_to_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  person_num_ = 0u;
  place_from_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  place_back_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BasicInfo::~BasicInfo() {
  // @@protoc_insertion_point(destructor:IM.Buddy.BasicInfo)
  SharedDtor();
}

void BasicInfo::SharedDtor() {
  if (date_from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_from_;
  }
  if (date_to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_to_;
  }
  if (place_to_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete place_to_code_;
  }
  if (place_from_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete place_from_code_;
  }
  if (place_back_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete place_back_code_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BasicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BasicInfo& BasicInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

BasicInfo* BasicInfo::default_instance_ = NULL;

BasicInfo* BasicInfo::New() const {
  return new BasicInfo;
}

void BasicInfo::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_date_from()) {
      if (date_from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        date_from_->clear();
      }
    }
    if (has_date_to()) {
      if (date_to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        date_to_->clear();
      }
    }
    if (has_place_to_code()) {
      if (place_to_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        place_to_code_->clear();
      }
    }
    person_num_ = 0u;
    if (has_place_from_code()) {
      if (place_from_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        place_from_code_->clear();
      }
    }
    if (has_place_back_code()) {
      if (place_back_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        place_back_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool BasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.BasicInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string date_from = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_date_to;
        break;
      }

      // required string date_to = 2;
      case 2: {
        if (tag == 18) {
         parse_date_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_place_to_code;
        break;
      }

      // required string place_to_code = 3;
      case 3: {
        if (tag == 26) {
         parse_place_to_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_place_to_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_person_num;
        break;
      }

      // required uint32 person_num = 4;
      case 4: {
        if (tag == 32) {
         parse_person_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &person_num_)));
          set_has_person_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_place_from_code;
        break;
      }

      // required string place_from_code = 5;
      case 5: {
        if (tag == 42) {
         parse_place_from_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_place_from_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_place_back_code;
        break;
      }

      // required string place_back_code = 6;
      case 6: {
        if (tag == 50) {
         parse_place_back_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_place_back_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.BasicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.BasicInfo)
  return false;
#undef DO_
}

void BasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.BasicInfo)
  // required string date_from = 1;
  if (has_date_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->date_from(), output);
  }

  // required string date_to = 2;
  if (has_date_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->date_to(), output);
  }

  // required string place_to_code = 3;
  if (has_place_to_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->place_to_code(), output);
  }

  // required uint32 person_num = 4;
  if (has_person_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->person_num(), output);
  }

  // required string place_from_code = 5;
  if (has_place_from_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->place_from_code(), output);
  }

  // required string place_back_code = 6;
  if (has_place_back_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->place_back_code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.BasicInfo)
}

int BasicInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string date_from = 1;
    if (has_date_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date_from());
    }

    // required string date_to = 2;
    if (has_date_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date_to());
    }

    // required string place_to_code = 3;
    if (has_place_to_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->place_to_code());
    }

    // required uint32 person_num = 4;
    if (has_person_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->person_num());
    }

    // required string place_from_code = 5;
    if (has_place_from_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->place_from_code());
    }

    // required string place_back_code = 6;
    if (has_place_back_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->place_back_code());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BasicInfo*>(&from));
}

void BasicInfo::MergeFrom(const BasicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date_from()) {
      set_date_from(from.date_from());
    }
    if (from.has_date_to()) {
      set_date_to(from.date_to());
    }
    if (from.has_place_to_code()) {
      set_place_to_code(from.place_to_code());
    }
    if (from.has_person_num()) {
      set_person_num(from.person_num());
    }
    if (from.has_place_from_code()) {
      set_place_from_code(from.place_from_code());
    }
    if (from.has_place_back_code()) {
      set_place_back_code(from.place_back_code());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void BasicInfo::CopyFrom(const BasicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void BasicInfo::Swap(BasicInfo* other) {
  if (other != this) {
    std::swap(date_from_, other->date_from_);
    std::swap(date_to_, other->date_to_);
    std::swap(place_to_code_, other->place_to_code_);
    std::swap(person_num_, other->person_num_);
    std::swap(place_from_code_, other->place_from_code_);
    std::swap(place_back_code_, other->place_back_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BasicInfo::GetTypeName() const {
  return "IM.Buddy.BasicInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int TransportConfig::kToolTypeFieldNumber;
const int TransportConfig::kTimeFromFieldNumber;
const int TransportConfig::kTimeToFieldNumber;
const int TransportConfig::kQualityFieldNumber;
const int TransportConfig::kTransitFieldNumber;
#endif  // !_MSC_VER

TransportConfig::TransportConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.TransportConfig)
}

void TransportConfig::InitAsDefaultInstance() {
}

TransportConfig::TransportConfig(const TransportConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.TransportConfig)
}

void TransportConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tool_type_ = 0u;
  time_from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_ = 1;
  transit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportConfig::~TransportConfig() {
  // @@protoc_insertion_point(destructor:IM.Buddy.TransportConfig)
  SharedDtor();
}

void TransportConfig::SharedDtor() {
  if (time_from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_from_;
  }
  if (time_to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_to_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TransportConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TransportConfig& TransportConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

TransportConfig* TransportConfig::default_instance_ = NULL;

TransportConfig* TransportConfig::New() const {
  return new TransportConfig;
}

void TransportConfig::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    tool_type_ = 0u;
    if (has_time_from()) {
      if (time_from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_from_->clear();
      }
    }
    if (has_time_to()) {
      if (time_to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_to_->clear();
      }
    }
    quality_ = 1;
    transit_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TransportConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.TransportConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tool_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tool_type_)));
          set_has_tool_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_time_from;
        break;
      }

      // required string time_from = 2;
      case 2: {
        if (tag == 18) {
         parse_time_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_time_to;
        break;
      }

      // required string time_to = 3;
      case 3: {
        if (tag == 26) {
         parse_time_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_quality;
        break;
      }

      // required .IM.Buddy.QualityType quality = 4;
      case 4: {
        if (tag == 32) {
         parse_quality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::Buddy::QualityType_IsValid(value)) {
            set_quality(static_cast< ::IM::Buddy::QualityType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_transit;
        break;
      }

      // required uint32 transit = 5;
      case 5: {
        if (tag == 40) {
         parse_transit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transit_)));
          set_has_transit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.TransportConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.TransportConfig)
  return false;
#undef DO_
}

void TransportConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.TransportConfig)
  // required uint32 tool_type = 1;
  if (has_tool_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tool_type(), output);
  }

  // required string time_from = 2;
  if (has_time_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->time_from(), output);
  }

  // required string time_to = 3;
  if (has_time_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->time_to(), output);
  }

  // required .IM.Buddy.QualityType quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->quality(), output);
  }

  // required uint32 transit = 5;
  if (has_transit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->transit(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.TransportConfig)
}

int TransportConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tool_type = 1;
    if (has_tool_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tool_type());
    }

    // required string time_from = 2;
    if (has_time_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_from());
    }

    // required string time_to = 3;
    if (has_time_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_to());
    }

    // required .IM.Buddy.QualityType quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

    // required uint32 transit = 5;
    if (has_transit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transit());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransportConfig*>(&from));
}

void TransportConfig::MergeFrom(const TransportConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tool_type()) {
      set_tool_type(from.tool_type());
    }
    if (from.has_time_from()) {
      set_time_from(from.time_from());
    }
    if (from.has_time_to()) {
      set_time_to(from.time_to());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_transit()) {
      set_transit(from.transit());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TransportConfig::CopyFrom(const TransportConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void TransportConfig::Swap(TransportConfig* other) {
  if (other != this) {
    std::swap(tool_type_, other->tool_type_);
    std::swap(time_from_, other->time_from_);
    std::swap(time_to_, other->time_to_);
    std::swap(quality_, other->quality_);
    std::swap(transit_, other->transit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TransportConfig::GetTypeName() const {
  return "IM.Buddy.TransportConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int TravelDetail::kTransportToolFieldNumber;
const int TravelDetail::kPlayDetailFieldNumber;
#endif  // !_MSC_VER

TravelDetail::TravelDetail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.TravelDetail)
}

void TravelDetail::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  transport_tool_ = const_cast< ::IM::Buddy::TransportTool*>(
      ::IM::Buddy::TransportTool::internal_default_instance());
#else
  transport_tool_ = const_cast< ::IM::Buddy::TransportTool*>(&::IM::Buddy::TransportTool::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  play_detail_ = const_cast< ::IM::Buddy::PlayDetail*>(
      ::IM::Buddy::PlayDetail::internal_default_instance());
#else
  play_detail_ = const_cast< ::IM::Buddy::PlayDetail*>(&::IM::Buddy::PlayDetail::default_instance());
#endif
}

TravelDetail::TravelDetail(const TravelDetail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.TravelDetail)
}

void TravelDetail::SharedCtor() {
  _cached_size_ = 0;
  transport_tool_ = NULL;
  play_detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TravelDetail::~TravelDetail() {
  // @@protoc_insertion_point(destructor:IM.Buddy.TravelDetail)
  SharedDtor();
}

void TravelDetail::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete transport_tool_;
    delete play_detail_;
  }
}

void TravelDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TravelDetail& TravelDetail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

TravelDetail* TravelDetail::default_instance_ = NULL;

TravelDetail* TravelDetail::New() const {
  return new TravelDetail;
}

void TravelDetail::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_transport_tool()) {
      if (transport_tool_ != NULL) transport_tool_->::IM::Buddy::TransportTool::Clear();
    }
    if (has_play_detail()) {
      if (play_detail_ != NULL) play_detail_->::IM::Buddy::PlayDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TravelDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.TravelDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.Buddy.TransportTool transport_tool = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transport_tool()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_play_detail;
        break;
      }

      // required .IM.Buddy.PlayDetail play_detail = 2;
      case 2: {
        if (tag == 18) {
         parse_play_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_play_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.TravelDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.TravelDetail)
  return false;
#undef DO_
}

void TravelDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.TravelDetail)
  // required .IM.Buddy.TransportTool transport_tool = 1;
  if (has_transport_tool()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->transport_tool(), output);
  }

  // required .IM.Buddy.PlayDetail play_detail = 2;
  if (has_play_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->play_detail(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.TravelDetail)
}

int TravelDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.Buddy.TransportTool transport_tool = 1;
    if (has_transport_tool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transport_tool());
    }

    // required .IM.Buddy.PlayDetail play_detail = 2;
    if (has_play_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->play_detail());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TravelDetail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TravelDetail*>(&from));
}

void TravelDetail::MergeFrom(const TravelDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transport_tool()) {
      mutable_transport_tool()->::IM::Buddy::TransportTool::MergeFrom(from.transport_tool());
    }
    if (from.has_play_detail()) {
      mutable_play_detail()->::IM::Buddy::PlayDetail::MergeFrom(from.play_detail());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TravelDetail::CopyFrom(const TravelDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TravelDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_transport_tool()) {
    if (!this->transport_tool().IsInitialized()) return false;
  }
  if (has_play_detail()) {
    if (!this->play_detail().IsInitialized()) return false;
  }
  return true;
}

void TravelDetail::Swap(TravelDetail* other) {
  if (other != this) {
    std::swap(transport_tool_, other->transport_tool_);
    std::swap(play_detail_, other->play_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TravelDetail::GetTypeName() const {
  return "IM.Buddy.TravelDetail";
}


// ===================================================================

#ifndef _MSC_VER
const int TransportTool::kFromInfoFieldNumber;
const int TransportTool::kBackInfoFieldNumber;
#endif  // !_MSC_VER

TransportTool::TransportTool()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.TransportTool)
}

void TransportTool::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  from_info_ = const_cast< ::IM::Buddy::TravelToolInfo*>(
      ::IM::Buddy::TravelToolInfo::internal_default_instance());
#else
  from_info_ = const_cast< ::IM::Buddy::TravelToolInfo*>(&::IM::Buddy::TravelToolInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  back_info_ = const_cast< ::IM::Buddy::TravelToolInfo*>(
      ::IM::Buddy::TravelToolInfo::internal_default_instance());
#else
  back_info_ = const_cast< ::IM::Buddy::TravelToolInfo*>(&::IM::Buddy::TravelToolInfo::default_instance());
#endif
}

TransportTool::TransportTool(const TransportTool& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.TransportTool)
}

void TransportTool::SharedCtor() {
  _cached_size_ = 0;
  from_info_ = NULL;
  back_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportTool::~TransportTool() {
  // @@protoc_insertion_point(destructor:IM.Buddy.TransportTool)
  SharedDtor();
}

void TransportTool::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete from_info_;
    delete back_info_;
  }
}

void TransportTool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TransportTool& TransportTool::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

TransportTool* TransportTool::default_instance_ = NULL;

TransportTool* TransportTool::New() const {
  return new TransportTool;
}

void TransportTool::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_from_info()) {
      if (from_info_ != NULL) from_info_->::IM::Buddy::TravelToolInfo::Clear();
    }
    if (has_back_info()) {
      if (back_info_ != NULL) back_info_->::IM::Buddy::TravelToolInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool TransportTool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.TransportTool)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.Buddy.TravelToolInfo from_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_back_info;
        break;
      }

      // required .IM.Buddy.TravelToolInfo back_info = 2;
      case 2: {
        if (tag == 18) {
         parse_back_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_back_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.TransportTool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.TransportTool)
  return false;
#undef DO_
}

void TransportTool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.TransportTool)
  // required .IM.Buddy.TravelToolInfo from_info = 1;
  if (has_from_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->from_info(), output);
  }

  // required .IM.Buddy.TravelToolInfo back_info = 2;
  if (has_back_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->back_info(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.TransportTool)
}

int TransportTool::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.Buddy.TravelToolInfo from_info = 1;
    if (has_from_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->from_info());
    }

    // required .IM.Buddy.TravelToolInfo back_info = 2;
    if (has_back_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->back_info());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportTool::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransportTool*>(&from));
}

void TransportTool::MergeFrom(const TransportTool& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_info()) {
      mutable_from_info()->::IM::Buddy::TravelToolInfo::MergeFrom(from.from_info());
    }
    if (from.has_back_info()) {
      mutable_back_info()->::IM::Buddy::TravelToolInfo::MergeFrom(from.back_info());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void TransportTool::CopyFrom(const TransportTool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportTool::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_from_info()) {
    if (!this->from_info().IsInitialized()) return false;
  }
  if (has_back_info()) {
    if (!this->back_info().IsInitialized()) return false;
  }
  return true;
}

void TransportTool::Swap(TransportTool* other) {
  if (other != this) {
    std::swap(from_info_, other->from_info_);
    std::swap(back_info_, other->back_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TransportTool::GetTypeName() const {
  return "IM.Buddy.TransportTool";
}


// ===================================================================

#ifndef _MSC_VER
const int DayScenic::kDayTimeFromFieldNumber;
const int DayScenic::kDayTimeToFieldNumber;
const int DayScenic::kScenicInfoFieldNumber;
#endif  // !_MSC_VER

DayScenic::DayScenic()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.DayScenic)
}

void DayScenic::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scenic_info_ = const_cast< ::IM::Buddy::ScenicInfo*>(
      ::IM::Buddy::ScenicInfo::internal_default_instance());
#else
  scenic_info_ = const_cast< ::IM::Buddy::ScenicInfo*>(&::IM::Buddy::ScenicInfo::default_instance());
#endif
}

DayScenic::DayScenic(const DayScenic& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.DayScenic)
}

void DayScenic::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  daytimefrom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  daytimeto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scenic_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayScenic::~DayScenic() {
  // @@protoc_insertion_point(destructor:IM.Buddy.DayScenic)
  SharedDtor();
}

void DayScenic::SharedDtor() {
  if (daytimefrom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete daytimefrom_;
  }
  if (daytimeto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete daytimeto_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete scenic_info_;
  }
}

void DayScenic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DayScenic& DayScenic::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

DayScenic* DayScenic::default_instance_ = NULL;

DayScenic* DayScenic::New() const {
  return new DayScenic;
}

void DayScenic::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_daytimefrom()) {
      if (daytimefrom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        daytimefrom_->clear();
      }
    }
    if (has_daytimeto()) {
      if (daytimeto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        daytimeto_->clear();
      }
    }
    if (has_scenic_info()) {
      if (scenic_info_ != NULL) scenic_info_->::IM::Buddy::ScenicInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DayScenic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.DayScenic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dayTimeFrom = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_daytimefrom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dayTimeTo;
        break;
      }

      // required string dayTimeTo = 2;
      case 2: {
        if (tag == 18) {
         parse_dayTimeTo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_daytimeto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_scenic_info;
        break;
      }

      // required .IM.Buddy.ScenicInfo scenic_info = 3;
      case 3: {
        if (tag == 26) {
         parse_scenic_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scenic_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.DayScenic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.DayScenic)
  return false;
#undef DO_
}

void DayScenic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.DayScenic)
  // required string dayTimeFrom = 1;
  if (has_daytimefrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->daytimefrom(), output);
  }

  // required string dayTimeTo = 2;
  if (has_daytimeto()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->daytimeto(), output);
  }

  // required .IM.Buddy.ScenicInfo scenic_info = 3;
  if (has_scenic_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->scenic_info(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.DayScenic)
}

int DayScenic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dayTimeFrom = 1;
    if (has_daytimefrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->daytimefrom());
    }

    // required string dayTimeTo = 2;
    if (has_daytimeto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->daytimeto());
    }

    // required .IM.Buddy.ScenicInfo scenic_info = 3;
    if (has_scenic_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scenic_info());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayScenic::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DayScenic*>(&from));
}

void DayScenic::MergeFrom(const DayScenic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daytimefrom()) {
      set_daytimefrom(from.daytimefrom());
    }
    if (from.has_daytimeto()) {
      set_daytimeto(from.daytimeto());
    }
    if (from.has_scenic_info()) {
      mutable_scenic_info()->::IM::Buddy::ScenicInfo::MergeFrom(from.scenic_info());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DayScenic::CopyFrom(const DayScenic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayScenic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_scenic_info()) {
    if (!this->scenic_info().IsInitialized()) return false;
  }
  return true;
}

void DayScenic::Swap(DayScenic* other) {
  if (other != this) {
    std::swap(daytimefrom_, other->daytimefrom_);
    std::swap(daytimeto_, other->daytimeto_);
    std::swap(scenic_info_, other->scenic_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DayScenic::GetTypeName() const {
  return "IM.Buddy.DayScenic";
}


// ===================================================================

#ifndef _MSC_VER
const int DayHotel::kDayTimeFromFieldNumber;
const int DayHotel::kDayTimeToFieldNumber;
const int DayHotel::kHotelInfoFieldNumber;
#endif  // !_MSC_VER

DayHotel::DayHotel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.DayHotel)
}

void DayHotel::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  hotel_info_ = const_cast< ::IM::Buddy::HotelInfo*>(
      ::IM::Buddy::HotelInfo::internal_default_instance());
#else
  hotel_info_ = const_cast< ::IM::Buddy::HotelInfo*>(&::IM::Buddy::HotelInfo::default_instance());
#endif
}

DayHotel::DayHotel(const DayHotel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.DayHotel)
}

void DayHotel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  daytimefrom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  daytimeto_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hotel_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayHotel::~DayHotel() {
  // @@protoc_insertion_point(destructor:IM.Buddy.DayHotel)
  SharedDtor();
}

void DayHotel::SharedDtor() {
  if (daytimefrom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete daytimefrom_;
  }
  if (daytimeto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete daytimeto_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete hotel_info_;
  }
}

void DayHotel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DayHotel& DayHotel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

DayHotel* DayHotel::default_instance_ = NULL;

DayHotel* DayHotel::New() const {
  return new DayHotel;
}

void DayHotel::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_daytimefrom()) {
      if (daytimefrom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        daytimefrom_->clear();
      }
    }
    if (has_daytimeto()) {
      if (daytimeto_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        daytimeto_->clear();
      }
    }
    if (has_hotel_info()) {
      if (hotel_info_ != NULL) hotel_info_->::IM::Buddy::HotelInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DayHotel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.DayHotel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dayTimeFrom = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_daytimefrom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dayTimeTo;
        break;
      }

      // required string dayTimeTo = 2;
      case 2: {
        if (tag == 18) {
         parse_dayTimeTo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_daytimeto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hotel_info;
        break;
      }

      // required .IM.Buddy.HotelInfo hotel_info = 3;
      case 3: {
        if (tag == 26) {
         parse_hotel_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hotel_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.DayHotel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.DayHotel)
  return false;
#undef DO_
}

void DayHotel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.DayHotel)
  // required string dayTimeFrom = 1;
  if (has_daytimefrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->daytimefrom(), output);
  }

  // required string dayTimeTo = 2;
  if (has_daytimeto()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->daytimeto(), output);
  }

  // required .IM.Buddy.HotelInfo hotel_info = 3;
  if (has_hotel_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->hotel_info(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.DayHotel)
}

int DayHotel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dayTimeFrom = 1;
    if (has_daytimefrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->daytimefrom());
    }

    // required string dayTimeTo = 2;
    if (has_daytimeto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->daytimeto());
    }

    // required .IM.Buddy.HotelInfo hotel_info = 3;
    if (has_hotel_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hotel_info());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayHotel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DayHotel*>(&from));
}

void DayHotel::MergeFrom(const DayHotel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daytimefrom()) {
      set_daytimefrom(from.daytimefrom());
    }
    if (from.has_daytimeto()) {
      set_daytimeto(from.daytimeto());
    }
    if (from.has_hotel_info()) {
      mutable_hotel_info()->::IM::Buddy::HotelInfo::MergeFrom(from.hotel_info());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DayHotel::CopyFrom(const DayHotel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayHotel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_hotel_info()) {
    if (!this->hotel_info().IsInitialized()) return false;
  }
  return true;
}

void DayHotel::Swap(DayHotel* other) {
  if (other != this) {
    std::swap(daytimefrom_, other->daytimefrom_);
    std::swap(daytimeto_, other->daytimeto_);
    std::swap(hotel_info_, other->hotel_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DayHotel::GetTypeName() const {
  return "IM.Buddy.DayHotel";
}


// ===================================================================

#ifndef _MSC_VER
const int PlayDetail::kPlayConfigFieldNumber;
const int PlayDetail::kDayHotelFieldNumber;
const int PlayDetail::kDayScenicFieldNumber;
#endif  // !_MSC_VER

PlayDetail::PlayDetail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.PlayDetail)
}

void PlayDetail::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  play_config_ = const_cast< ::IM::Buddy::PlayConfig*>(
      ::IM::Buddy::PlayConfig::internal_default_instance());
#else
  play_config_ = const_cast< ::IM::Buddy::PlayConfig*>(&::IM::Buddy::PlayConfig::default_instance());
#endif
}

PlayDetail::PlayDetail(const PlayDetail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.PlayDetail)
}

void PlayDetail::SharedCtor() {
  _cached_size_ = 0;
  play_config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayDetail::~PlayDetail() {
  // @@protoc_insertion_point(destructor:IM.Buddy.PlayDetail)
  SharedDtor();
}

void PlayDetail::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete play_config_;
  }
}

void PlayDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayDetail& PlayDetail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

PlayDetail* PlayDetail::default_instance_ = NULL;

PlayDetail* PlayDetail::New() const {
  return new PlayDetail;
}

void PlayDetail::Clear() {
  if (has_play_config()) {
    if (play_config_ != NULL) play_config_->::IM::Buddy::PlayConfig::Clear();
  }
  day_hotel_.Clear();
  day_scenic_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PlayDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.PlayDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.Buddy.PlayConfig play_config = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_play_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_day_hotel;
        break;
      }

      // repeated .IM.Buddy.DayHotel day_hotel = 2;
      case 2: {
        if (tag == 18) {
         parse_day_hotel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_day_hotel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_day_hotel;
        if (input->ExpectTag(26)) goto parse_day_scenic;
        break;
      }

      // repeated .IM.Buddy.DayScenic day_scenic = 3;
      case 3: {
        if (tag == 26) {
         parse_day_scenic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_day_scenic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_day_scenic;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.PlayDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.PlayDetail)
  return false;
#undef DO_
}

void PlayDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.PlayDetail)
  // required .IM.Buddy.PlayConfig play_config = 1;
  if (has_play_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->play_config(), output);
  }

  // repeated .IM.Buddy.DayHotel day_hotel = 2;
  for (int i = 0; i < this->day_hotel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->day_hotel(i), output);
  }

  // repeated .IM.Buddy.DayScenic day_scenic = 3;
  for (int i = 0; i < this->day_scenic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->day_scenic(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.PlayDetail)
}

int PlayDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.Buddy.PlayConfig play_config = 1;
    if (has_play_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->play_config());
    }

  }
  // repeated .IM.Buddy.DayHotel day_hotel = 2;
  total_size += 1 * this->day_hotel_size();
  for (int i = 0; i < this->day_hotel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->day_hotel(i));
  }

  // repeated .IM.Buddy.DayScenic day_scenic = 3;
  total_size += 1 * this->day_scenic_size();
  for (int i = 0; i < this->day_scenic_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->day_scenic(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayDetail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayDetail*>(&from));
}

void PlayDetail::MergeFrom(const PlayDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  day_hotel_.MergeFrom(from.day_hotel_);
  day_scenic_.MergeFrom(from.day_scenic_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_play_config()) {
      mutable_play_config()->::IM::Buddy::PlayConfig::MergeFrom(from.play_config());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PlayDetail::CopyFrom(const PlayDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_play_config()) {
    if (!this->play_config().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->day_hotel())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->day_scenic())) return false;
  return true;
}

void PlayDetail::Swap(PlayDetail* other) {
  if (other != this) {
    std::swap(play_config_, other->play_config_);
    day_hotel_.Swap(&other->day_hotel_);
    day_scenic_.Swap(&other->day_scenic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayDetail::GetTypeName() const {
  return "IM.Buddy.PlayDetail";
}


// ===================================================================

#ifndef _MSC_VER
const int PlayConfig::kQualityFieldNumber;
const int PlayConfig::kTimeFromFieldNumber;
const int PlayConfig::kTimeToFieldNumber;
const int PlayConfig::kTransportToolTypeFieldNumber;
const int PlayConfig::kPositionFieldNumber;
#endif  // !_MSC_VER

PlayConfig::PlayConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.PlayConfig)
}

void PlayConfig::InitAsDefaultInstance() {
}

PlayConfig::PlayConfig(const PlayConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.PlayConfig)
}

void PlayConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  quality_ = 1;
  time_from_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_to_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transport_tool_type_ = 0u;
  position_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayConfig::~PlayConfig() {
  // @@protoc_insertion_point(destructor:IM.Buddy.PlayConfig)
  SharedDtor();
}

void PlayConfig::SharedDtor() {
  if (time_from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_from_;
  }
  if (time_to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_to_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayConfig& PlayConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

PlayConfig* PlayConfig::default_instance_ = NULL;

PlayConfig* PlayConfig::New() const {
  return new PlayConfig;
}

void PlayConfig::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    quality_ = 1;
    if (has_time_from()) {
      if (time_from_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_from_->clear();
      }
    }
    if (has_time_to()) {
      if (time_to_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_to_->clear();
      }
    }
    transport_tool_type_ = 0u;
    position_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool PlayConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.PlayConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IM.Buddy.QualityType quality = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::Buddy::QualityType_IsValid(value)) {
            set_quality(static_cast< ::IM::Buddy::QualityType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_time_from;
        break;
      }

      // required string time_from = 2;
      case 2: {
        if (tag == 18) {
         parse_time_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_from()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_time_to;
        break;
      }

      // required string time_to = 3;
      case 3: {
        if (tag == 26) {
         parse_time_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_transport_tool_type;
        break;
      }

      // required uint32 transport_tool_type = 4;
      case 4: {
        if (tag == 32) {
         parse_transport_tool_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transport_tool_type_)));
          set_has_transport_tool_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_position;
        break;
      }

      // required .IM.Buddy.PositionType position = 5;
      case 5: {
        if (tag == 40) {
         parse_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::Buddy::PositionType_IsValid(value)) {
            set_position(static_cast< ::IM::Buddy::PositionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.PlayConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.PlayConfig)
  return false;
#undef DO_
}

void PlayConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.PlayConfig)
  // required .IM.Buddy.QualityType quality = 1;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->quality(), output);
  }

  // required string time_from = 2;
  if (has_time_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->time_from(), output);
  }

  // required string time_to = 3;
  if (has_time_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->time_to(), output);
  }

  // required uint32 transport_tool_type = 4;
  if (has_transport_tool_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->transport_tool_type(), output);
  }

  // required .IM.Buddy.PositionType position = 5;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->position(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.PlayConfig)
}

int PlayConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .IM.Buddy.QualityType quality = 1;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

    // required string time_from = 2;
    if (has_time_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_from());
    }

    // required string time_to = 3;
    if (has_time_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_to());
    }

    // required uint32 transport_tool_type = 4;
    if (has_transport_tool_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transport_tool_type());
    }

    // required .IM.Buddy.PositionType position = 5;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayConfig*>(&from));
}

void PlayConfig::MergeFrom(const PlayConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_time_from()) {
      set_time_from(from.time_from());
    }
    if (from.has_time_to()) {
      set_time_to(from.time_to());
    }
    if (from.has_transport_tool_type()) {
      set_transport_tool_type(from.transport_tool_type());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void PlayConfig::CopyFrom(const PlayConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PlayConfig::Swap(PlayConfig* other) {
  if (other != this) {
    std::swap(quality_, other->quality_);
    std::swap(time_from_, other->time_from_);
    std::swap(time_to_, other->time_to_);
    std::swap(transport_tool_type_, other->transport_tool_type_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayConfig::GetTypeName() const {
  return "IM.Buddy.PlayConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int ScenicInfo::kIdFieldNumber;
const int ScenicInfo::kCityCodeFieldNumber;
const int ScenicInfo::kSightNameFieldNumber;
const int ScenicInfo::kSightScoreFieldNumber;
const int ScenicInfo::kSightTagFieldNumber;
const int ScenicInfo::kSightPicFieldNumber;
const int ScenicInfo::kSightMustSeeFieldNumber;
const int ScenicInfo::kSightUrlFieldNumber;
const int ScenicInfo::kSightOpenTimeFieldNumber;
const int ScenicInfo::kSightPlayTimeFieldNumber;
const int ScenicInfo::kSightPriceFieldNumber;
const int ScenicInfo::kSightStartTimeFieldNumber;
const int ScenicInfo::kSightEndTimeFieldNumber;
const int ScenicInfo::kSightLongitudeFieldNumber;
const int ScenicInfo::kSightLatitudeFieldNumber;
const int ScenicInfo::kSightAddressFieldNumber;
const int ScenicInfo::kSightDiscriptionFieldNumber;
const int ScenicInfo::kSightDiscriptionDetailFieldNumber;
const int ScenicInfo::kSightStatusFieldNumber;
const int ScenicInfo::kLiteratureFieldNumber;
const int ScenicInfo::kComfortFieldNumber;
const int ScenicInfo::kExplorationFieldNumber;
const int ScenicInfo::kExciteFieldNumber;
const int ScenicInfo::kEncounterFieldNumber;
#endif  // !_MSC_VER

ScenicInfo::ScenicInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.ScenicInfo)
}

void ScenicInfo::InitAsDefaultInstance() {
}

ScenicInfo::ScenicInfo(const ScenicInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.ScenicInfo)
}

void ScenicInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  city_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sightname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sightscore_ = 0u;
  sighttag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sightpic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sightmustsee_ = 0u;
  sighturl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sightopentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sightplaytime_ = 0u;
  sightprice_ = 0u;
  sightstarttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sightendtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sightlongitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sightlatitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sightaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sightdiscription_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sightdiscriptiondetail_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sightstatus_ = 0u;
  literature_ = 0u;
  comfort_ = 0u;
  exploration_ = 0u;
  excite_ = 0u;
  encounter_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScenicInfo::~ScenicInfo() {
  // @@protoc_insertion_point(destructor:IM.Buddy.ScenicInfo)
  SharedDtor();
}

void ScenicInfo::SharedDtor() {
  if (city_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_code_;
  }
  if (sightname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sightname_;
  }
  if (sighttag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sighttag_;
  }
  if (sightpic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sightpic_;
  }
  if (sighturl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sighturl_;
  }
  if (sightopentime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sightopentime_;
  }
  if (sightstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sightstarttime_;
  }
  if (sightendtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sightendtime_;
  }
  if (sightlongitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sightlongitude_;
  }
  if (sightlatitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sightlatitude_;
  }
  if (sightaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sightaddress_;
  }
  if (sightdiscription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sightdiscription_;
  }
  if (sightdiscriptiondetail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sightdiscriptiondetail_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ScenicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScenicInfo& ScenicInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

ScenicInfo* ScenicInfo::default_instance_ = NULL;

ScenicInfo* ScenicInfo::New() const {
  return new ScenicInfo;
}

void ScenicInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ScenicInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, sightscore_);
    if (has_city_code()) {
      if (city_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_code_->clear();
      }
    }
    if (has_sightname()) {
      if (sightname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sightname_->clear();
      }
    }
    if (has_sighttag()) {
      if (sighttag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sighttag_->clear();
      }
    }
    if (has_sightpic()) {
      if (sightpic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sightpic_->clear();
      }
    }
    sightmustsee_ = 0u;
    if (has_sighturl()) {
      if (sighturl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sighturl_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_sightopentime()) {
      if (sightopentime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sightopentime_->clear();
      }
    }
    sightplaytime_ = 0u;
    sightprice_ = 0u;
    if (has_sightstarttime()) {
      if (sightstarttime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sightstarttime_->clear();
      }
    }
    if (has_sightendtime()) {
      if (sightendtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sightendtime_->clear();
      }
    }
    if (has_sightlongitude()) {
      if (sightlongitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sightlongitude_->clear();
      }
    }
    if (has_sightlatitude()) {
      if (sightlatitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sightlatitude_->clear();
      }
    }
    if (has_sightaddress()) {
      if (sightaddress_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sightaddress_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(literature_, encounter_);
    if (has_sightdiscription()) {
      if (sightdiscription_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sightdiscription_->clear();
      }
    }
    if (has_sightdiscriptiondetail()) {
      if (sightdiscriptiondetail_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sightdiscriptiondetail_->clear();
      }
    }
    sightstatus_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ScenicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.ScenicInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_city_code;
        break;
      }

      // required string city_code = 2;
      case 2: {
        if (tag == 18) {
         parse_city_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sightName;
        break;
      }

      // required string sightName = 3;
      case 3: {
        if (tag == 26) {
         parse_sightName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sightname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sightScore;
        break;
      }

      // required uint32 sightScore = 4;
      case 4: {
        if (tag == 32) {
         parse_sightScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sightscore_)));
          set_has_sightscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sightTag;
        break;
      }

      // required string sightTag = 5;
      case 5: {
        if (tag == 42) {
         parse_sightTag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sighttag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sightPic;
        break;
      }

      // required string sightPic = 6;
      case 6: {
        if (tag == 50) {
         parse_sightPic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sightpic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sightMustSee;
        break;
      }

      // required uint32 sightMustSee = 7;
      case 7: {
        if (tag == 56) {
         parse_sightMustSee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sightmustsee_)));
          set_has_sightmustsee();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sightUrl;
        break;
      }

      // required string sightUrl = 8;
      case 8: {
        if (tag == 66) {
         parse_sightUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sighturl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_sightOpenTime;
        break;
      }

      // required string sightOpenTime = 9;
      case 9: {
        if (tag == 74) {
         parse_sightOpenTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sightopentime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_sightPlayTime;
        break;
      }

      // required uint32 sightPlayTime = 10;
      case 10: {
        if (tag == 80) {
         parse_sightPlayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sightplaytime_)));
          set_has_sightplaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sightPrice;
        break;
      }

      // required uint32 sightPrice = 11;
      case 11: {
        if (tag == 88) {
         parse_sightPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sightprice_)));
          set_has_sightprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sightStartTime;
        break;
      }

      // required string sightStartTime = 12;
      case 12: {
        if (tag == 98) {
         parse_sightStartTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sightstarttime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_sightEndTime;
        break;
      }

      // required string sightEndTime = 13;
      case 13: {
        if (tag == 106) {
         parse_sightEndTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sightendtime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_sightLongitude;
        break;
      }

      // required string sightLongitude = 14;
      case 14: {
        if (tag == 114) {
         parse_sightLongitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sightlongitude()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_sightLatitude;
        break;
      }

      // required string sightLatitude = 15;
      case 15: {
        if (tag == 122) {
         parse_sightLatitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sightlatitude()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_sightAddress;
        break;
      }

      // required string sightAddress = 16;
      case 16: {
        if (tag == 130) {
         parse_sightAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sightaddress()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_sightDiscription;
        break;
      }

      // required string sightDiscription = 17;
      case 17: {
        if (tag == 138) {
         parse_sightDiscription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sightdiscription()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_sightDiscriptionDetail;
        break;
      }

      // required string sightDiscriptionDetail = 18;
      case 18: {
        if (tag == 146) {
         parse_sightDiscriptionDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sightdiscriptiondetail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_sightStatus;
        break;
      }

      // required uint32 sightStatus = 19;
      case 19: {
        if (tag == 152) {
         parse_sightStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sightstatus_)));
          set_has_sightstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_literature;
        break;
      }

      // required uint32 literature = 20;
      case 20: {
        if (tag == 160) {
         parse_literature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &literature_)));
          set_has_literature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_comfort;
        break;
      }

      // required uint32 comfort = 21;
      case 21: {
        if (tag == 168) {
         parse_comfort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &comfort_)));
          set_has_comfort();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_exploration;
        break;
      }

      // required uint32 exploration = 22;
      case 22: {
        if (tag == 176) {
         parse_exploration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exploration_)));
          set_has_exploration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_excite;
        break;
      }

      // required uint32 excite = 23;
      case 23: {
        if (tag == 184) {
         parse_excite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &excite_)));
          set_has_excite();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_encounter;
        break;
      }

      // required uint32 encounter = 24;
      case 24: {
        if (tag == 192) {
         parse_encounter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &encounter_)));
          set_has_encounter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.ScenicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.ScenicInfo)
  return false;
#undef DO_
}

void ScenicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.ScenicInfo)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string city_code = 2;
  if (has_city_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->city_code(), output);
  }

  // required string sightName = 3;
  if (has_sightname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sightname(), output);
  }

  // required uint32 sightScore = 4;
  if (has_sightscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sightscore(), output);
  }

  // required string sightTag = 5;
  if (has_sighttag()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sighttag(), output);
  }

  // required string sightPic = 6;
  if (has_sightpic()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sightpic(), output);
  }

  // required uint32 sightMustSee = 7;
  if (has_sightmustsee()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sightmustsee(), output);
  }

  // required string sightUrl = 8;
  if (has_sighturl()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sighturl(), output);
  }

  // required string sightOpenTime = 9;
  if (has_sightopentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sightopentime(), output);
  }

  // required uint32 sightPlayTime = 10;
  if (has_sightplaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sightplaytime(), output);
  }

  // required uint32 sightPrice = 11;
  if (has_sightprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->sightprice(), output);
  }

  // required string sightStartTime = 12;
  if (has_sightstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->sightstarttime(), output);
  }

  // required string sightEndTime = 13;
  if (has_sightendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->sightendtime(), output);
  }

  // required string sightLongitude = 14;
  if (has_sightlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->sightlongitude(), output);
  }

  // required string sightLatitude = 15;
  if (has_sightlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->sightlatitude(), output);
  }

  // required string sightAddress = 16;
  if (has_sightaddress()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->sightaddress(), output);
  }

  // required string sightDiscription = 17;
  if (has_sightdiscription()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->sightdiscription(), output);
  }

  // required string sightDiscriptionDetail = 18;
  if (has_sightdiscriptiondetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->sightdiscriptiondetail(), output);
  }

  // required uint32 sightStatus = 19;
  if (has_sightstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->sightstatus(), output);
  }

  // required uint32 literature = 20;
  if (has_literature()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->literature(), output);
  }

  // required uint32 comfort = 21;
  if (has_comfort()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->comfort(), output);
  }

  // required uint32 exploration = 22;
  if (has_exploration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->exploration(), output);
  }

  // required uint32 excite = 23;
  if (has_excite()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->excite(), output);
  }

  // required uint32 encounter = 24;
  if (has_encounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->encounter(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.ScenicInfo)
}

int ScenicInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string city_code = 2;
    if (has_city_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city_code());
    }

    // required string sightName = 3;
    if (has_sightname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sightname());
    }

    // required uint32 sightScore = 4;
    if (has_sightscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sightscore());
    }

    // required string sightTag = 5;
    if (has_sighttag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sighttag());
    }

    // required string sightPic = 6;
    if (has_sightpic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sightpic());
    }

    // required uint32 sightMustSee = 7;
    if (has_sightmustsee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sightmustsee());
    }

    // required string sightUrl = 8;
    if (has_sighturl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sighturl());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string sightOpenTime = 9;
    if (has_sightopentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sightopentime());
    }

    // required uint32 sightPlayTime = 10;
    if (has_sightplaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sightplaytime());
    }

    // required uint32 sightPrice = 11;
    if (has_sightprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sightprice());
    }

    // required string sightStartTime = 12;
    if (has_sightstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sightstarttime());
    }

    // required string sightEndTime = 13;
    if (has_sightendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sightendtime());
    }

    // required string sightLongitude = 14;
    if (has_sightlongitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sightlongitude());
    }

    // required string sightLatitude = 15;
    if (has_sightlatitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sightlatitude());
    }

    // required string sightAddress = 16;
    if (has_sightaddress()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sightaddress());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string sightDiscription = 17;
    if (has_sightdiscription()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sightdiscription());
    }

    // required string sightDiscriptionDetail = 18;
    if (has_sightdiscriptiondetail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sightdiscriptiondetail());
    }

    // required uint32 sightStatus = 19;
    if (has_sightstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sightstatus());
    }

    // required uint32 literature = 20;
    if (has_literature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->literature());
    }

    // required uint32 comfort = 21;
    if (has_comfort()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->comfort());
    }

    // required uint32 exploration = 22;
    if (has_exploration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exploration());
    }

    // required uint32 excite = 23;
    if (has_excite()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->excite());
    }

    // required uint32 encounter = 24;
    if (has_encounter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->encounter());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenicInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScenicInfo*>(&from));
}

void ScenicInfo::MergeFrom(const ScenicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_city_code()) {
      set_city_code(from.city_code());
    }
    if (from.has_sightname()) {
      set_sightname(from.sightname());
    }
    if (from.has_sightscore()) {
      set_sightscore(from.sightscore());
    }
    if (from.has_sighttag()) {
      set_sighttag(from.sighttag());
    }
    if (from.has_sightpic()) {
      set_sightpic(from.sightpic());
    }
    if (from.has_sightmustsee()) {
      set_sightmustsee(from.sightmustsee());
    }
    if (from.has_sighturl()) {
      set_sighturl(from.sighturl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sightopentime()) {
      set_sightopentime(from.sightopentime());
    }
    if (from.has_sightplaytime()) {
      set_sightplaytime(from.sightplaytime());
    }
    if (from.has_sightprice()) {
      set_sightprice(from.sightprice());
    }
    if (from.has_sightstarttime()) {
      set_sightstarttime(from.sightstarttime());
    }
    if (from.has_sightendtime()) {
      set_sightendtime(from.sightendtime());
    }
    if (from.has_sightlongitude()) {
      set_sightlongitude(from.sightlongitude());
    }
    if (from.has_sightlatitude()) {
      set_sightlatitude(from.sightlatitude());
    }
    if (from.has_sightaddress()) {
      set_sightaddress(from.sightaddress());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sightdiscription()) {
      set_sightdiscription(from.sightdiscription());
    }
    if (from.has_sightdiscriptiondetail()) {
      set_sightdiscriptiondetail(from.sightdiscriptiondetail());
    }
    if (from.has_sightstatus()) {
      set_sightstatus(from.sightstatus());
    }
    if (from.has_literature()) {
      set_literature(from.literature());
    }
    if (from.has_comfort()) {
      set_comfort(from.comfort());
    }
    if (from.has_exploration()) {
      set_exploration(from.exploration());
    }
    if (from.has_excite()) {
      set_excite(from.excite());
    }
    if (from.has_encounter()) {
      set_encounter(from.encounter());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ScenicInfo::CopyFrom(const ScenicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00ffffff) != 0x00ffffff) return false;

  return true;
}

void ScenicInfo::Swap(ScenicInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(city_code_, other->city_code_);
    std::swap(sightname_, other->sightname_);
    std::swap(sightscore_, other->sightscore_);
    std::swap(sighttag_, other->sighttag_);
    std::swap(sightpic_, other->sightpic_);
    std::swap(sightmustsee_, other->sightmustsee_);
    std::swap(sighturl_, other->sighturl_);
    std::swap(sightopentime_, other->sightopentime_);
    std::swap(sightplaytime_, other->sightplaytime_);
    std::swap(sightprice_, other->sightprice_);
    std::swap(sightstarttime_, other->sightstarttime_);
    std::swap(sightendtime_, other->sightendtime_);
    std::swap(sightlongitude_, other->sightlongitude_);
    std::swap(sightlatitude_, other->sightlatitude_);
    std::swap(sightaddress_, other->sightaddress_);
    std::swap(sightdiscription_, other->sightdiscription_);
    std::swap(sightdiscriptiondetail_, other->sightdiscriptiondetail_);
    std::swap(sightstatus_, other->sightstatus_);
    std::swap(literature_, other->literature_);
    std::swap(comfort_, other->comfort_);
    std::swap(exploration_, other->exploration_);
    std::swap(excite_, other->excite_);
    std::swap(encounter_, other->encounter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ScenicInfo::GetTypeName() const {
  return "IM.Buddy.ScenicInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int HotelInfo::kIdFieldNumber;
const int HotelInfo::kCityCodeFieldNumber;
const int HotelInfo::kHotelNameFieldNumber;
const int HotelInfo::kHotelScoreFieldNumber;
const int HotelInfo::kHotelTagFieldNumber;
const int HotelInfo::kHotelPicFieldNumber;
const int HotelInfo::kHotelUrlFieldNumber;
const int HotelInfo::kHotelPriceFieldNumber;
const int HotelInfo::kHotelLongitudeFieldNumber;
const int HotelInfo::kHotelLatitudeFieldNumber;
#endif  // !_MSC_VER

HotelInfo::HotelInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.HotelInfo)
}

void HotelInfo::InitAsDefaultInstance() {
}

HotelInfo::HotelInfo(const HotelInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.HotelInfo)
}

void HotelInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  city_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hotelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hotelscore_ = 0u;
  hoteltag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hotelpic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hotelurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hotelprice_ = 0u;
  hotellongitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hotellatitude_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HotelInfo::~HotelInfo() {
  // @@protoc_insertion_point(destructor:IM.Buddy.HotelInfo)
  SharedDtor();
}

void HotelInfo::SharedDtor() {
  if (city_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_code_;
  }
  if (hotelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hotelname_;
  }
  if (hoteltag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hoteltag_;
  }
  if (hotelpic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hotelpic_;
  }
  if (hotelurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hotelurl_;
  }
  if (hotellongitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hotellongitude_;
  }
  if (hotellatitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hotellatitude_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void HotelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HotelInfo& HotelInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

HotelInfo* HotelInfo::default_instance_ = NULL;

HotelInfo* HotelInfo::New() const {
  return new HotelInfo;
}

void HotelInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HotelInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, hotelscore_);
    if (has_city_code()) {
      if (city_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_code_->clear();
      }
    }
    if (has_hotelname()) {
      if (hotelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hotelname_->clear();
      }
    }
    if (has_hoteltag()) {
      if (hoteltag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hoteltag_->clear();
      }
    }
    if (has_hotelpic()) {
      if (hotelpic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hotelpic_->clear();
      }
    }
    if (has_hotelurl()) {
      if (hotelurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hotelurl_->clear();
      }
    }
    hotelprice_ = 0u;
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_hotellongitude()) {
      if (hotellongitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hotellongitude_->clear();
      }
    }
    if (has_hotellatitude()) {
      if (hotellatitude_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hotellatitude_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool HotelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.HotelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_city_code;
        break;
      }

      // required string city_code = 2;
      case 2: {
        if (tag == 18) {
         parse_city_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hotelName;
        break;
      }

      // required string hotelName = 3;
      case 3: {
        if (tag == 26) {
         parse_hotelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hotelname()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hotelScore;
        break;
      }

      // required uint32 hotelScore = 4;
      case 4: {
        if (tag == 32) {
         parse_hotelScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hotelscore_)));
          set_has_hotelscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_hotelTag;
        break;
      }

      // required string hotelTag = 5;
      case 5: {
        if (tag == 42) {
         parse_hotelTag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hoteltag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_hotelPic;
        break;
      }

      // required string hotelPic = 6;
      case 6: {
        if (tag == 50) {
         parse_hotelPic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hotelpic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_hotelUrl;
        break;
      }

      // required string hotelUrl = 7;
      case 7: {
        if (tag == 58) {
         parse_hotelUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hotelurl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_hotelPrice;
        break;
      }

      // required uint32 hotelPrice = 8;
      case 8: {
        if (tag == 64) {
         parse_hotelPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hotelprice_)));
          set_has_hotelprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_hotelLongitude;
        break;
      }

      // required string hotelLongitude = 9;
      case 9: {
        if (tag == 74) {
         parse_hotelLongitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hotellongitude()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_hotelLatitude;
        break;
      }

      // required string hotelLatitude = 10;
      case 10: {
        if (tag == 82) {
         parse_hotelLatitude:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hotellatitude()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.HotelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.HotelInfo)
  return false;
#undef DO_
}

void HotelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.HotelInfo)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string city_code = 2;
  if (has_city_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->city_code(), output);
  }

  // required string hotelName = 3;
  if (has_hotelname()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hotelname(), output);
  }

  // required uint32 hotelScore = 4;
  if (has_hotelscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hotelscore(), output);
  }

  // required string hotelTag = 5;
  if (has_hoteltag()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hoteltag(), output);
  }

  // required string hotelPic = 6;
  if (has_hotelpic()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->hotelpic(), output);
  }

  // required string hotelUrl = 7;
  if (has_hotelurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->hotelurl(), output);
  }

  // required uint32 hotelPrice = 8;
  if (has_hotelprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hotelprice(), output);
  }

  // required string hotelLongitude = 9;
  if (has_hotellongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->hotellongitude(), output);
  }

  // required string hotelLatitude = 10;
  if (has_hotellatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->hotellatitude(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.HotelInfo)
}

int HotelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string city_code = 2;
    if (has_city_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city_code());
    }

    // required string hotelName = 3;
    if (has_hotelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hotelname());
    }

    // required uint32 hotelScore = 4;
    if (has_hotelscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hotelscore());
    }

    // required string hotelTag = 5;
    if (has_hoteltag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hoteltag());
    }

    // required string hotelPic = 6;
    if (has_hotelpic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hotelpic());
    }

    // required string hotelUrl = 7;
    if (has_hotelurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hotelurl());
    }

    // required uint32 hotelPrice = 8;
    if (has_hotelprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hotelprice());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string hotelLongitude = 9;
    if (has_hotellongitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hotellongitude());
    }

    // required string hotelLatitude = 10;
    if (has_hotellatitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hotellatitude());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotelInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HotelInfo*>(&from));
}

void HotelInfo::MergeFrom(const HotelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_city_code()) {
      set_city_code(from.city_code());
    }
    if (from.has_hotelname()) {
      set_hotelname(from.hotelname());
    }
    if (from.has_hotelscore()) {
      set_hotelscore(from.hotelscore());
    }
    if (from.has_hoteltag()) {
      set_hoteltag(from.hoteltag());
    }
    if (from.has_hotelpic()) {
      set_hotelpic(from.hotelpic());
    }
    if (from.has_hotelurl()) {
      set_hotelurl(from.hotelurl());
    }
    if (from.has_hotelprice()) {
      set_hotelprice(from.hotelprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hotellongitude()) {
      set_hotellongitude(from.hotellongitude());
    }
    if (from.has_hotellatitude()) {
      set_hotellatitude(from.hotellatitude());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void HotelInfo::CopyFrom(const HotelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotelInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void HotelInfo::Swap(HotelInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(city_code_, other->city_code_);
    std::swap(hotelname_, other->hotelname_);
    std::swap(hotelscore_, other->hotelscore_);
    std::swap(hoteltag_, other->hoteltag_);
    std::swap(hotelpic_, other->hotelpic_);
    std::swap(hotelurl_, other->hotelurl_);
    std::swap(hotelprice_, other->hotelprice_);
    std::swap(hotellongitude_, other->hotellongitude_);
    std::swap(hotellatitude_, other->hotellatitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string HotelInfo::GetTypeName() const {
  return "IM.Buddy.HotelInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int MyTravel::kDbIdxFieldNumber;
const int MyTravel::kCostFieldNumber;
const int MyTravel::kBasicInfoFieldNumber;
const int MyTravel::kTransportConfigFieldNumber;
const int MyTravel::kTravelDetailFieldNumber;
#endif  // !_MSC_VER

MyTravel::MyTravel()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.MyTravel)
}

void MyTravel::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  basic_info_ = const_cast< ::IM::Buddy::BasicInfo*>(
      ::IM::Buddy::BasicInfo::internal_default_instance());
#else
  basic_info_ = const_cast< ::IM::Buddy::BasicInfo*>(&::IM::Buddy::BasicInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  transport_config_ = const_cast< ::IM::Buddy::TransportConfig*>(
      ::IM::Buddy::TransportConfig::internal_default_instance());
#else
  transport_config_ = const_cast< ::IM::Buddy::TransportConfig*>(&::IM::Buddy::TransportConfig::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  travel_detail_ = const_cast< ::IM::Buddy::TravelDetail*>(
      ::IM::Buddy::TravelDetail::internal_default_instance());
#else
  travel_detail_ = const_cast< ::IM::Buddy::TravelDetail*>(&::IM::Buddy::TravelDetail::default_instance());
#endif
}

MyTravel::MyTravel(const MyTravel& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.MyTravel)
}

void MyTravel::SharedCtor() {
  _cached_size_ = 0;
  db_idx_ = 0u;
  cost_ = 0u;
  basic_info_ = NULL;
  transport_config_ = NULL;
  travel_detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyTravel::~MyTravel() {
  // @@protoc_insertion_point(destructor:IM.Buddy.MyTravel)
  SharedDtor();
}

void MyTravel::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete basic_info_;
    delete transport_config_;
    delete travel_detail_;
  }
}

void MyTravel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MyTravel& MyTravel::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

MyTravel* MyTravel::default_instance_ = NULL;

MyTravel* MyTravel::New() const {
  return new MyTravel;
}

void MyTravel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MyTravel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(db_idx_, cost_);
    if (has_basic_info()) {
      if (basic_info_ != NULL) basic_info_->::IM::Buddy::BasicInfo::Clear();
    }
    if (has_transport_config()) {
      if (transport_config_ != NULL) transport_config_->::IM::Buddy::TransportConfig::Clear();
    }
    if (has_travel_detail()) {
      if (travel_detail_ != NULL) travel_detail_->::IM::Buddy::TravelDetail::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool MyTravel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.MyTravel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 db_idx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_idx_)));
          set_has_db_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cost;
        break;
      }

      // required uint32 cost = 2;
      case 2: {
        if (tag == 16) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_basic_info;
        break;
      }

      // required .IM.Buddy.BasicInfo basic_info = 3;
      case 3: {
        if (tag == 26) {
         parse_basic_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transport_config;
        break;
      }

      // required .IM.Buddy.TransportConfig transport_config = 4;
      case 4: {
        if (tag == 34) {
         parse_transport_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transport_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_travel_detail;
        break;
      }

      // required .IM.Buddy.TravelDetail travel_detail = 5;
      case 5: {
        if (tag == 42) {
         parse_travel_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_travel_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.MyTravel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.MyTravel)
  return false;
#undef DO_
}

void MyTravel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.MyTravel)
  // required uint32 db_idx = 1;
  if (has_db_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->db_idx(), output);
  }

  // required uint32 cost = 2;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost(), output);
  }

  // required .IM.Buddy.BasicInfo basic_info = 3;
  if (has_basic_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->basic_info(), output);
  }

  // required .IM.Buddy.TransportConfig transport_config = 4;
  if (has_transport_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->transport_config(), output);
  }

  // required .IM.Buddy.TravelDetail travel_detail = 5;
  if (has_travel_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->travel_detail(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.MyTravel)
}

int MyTravel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 db_idx = 1;
    if (has_db_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_idx());
    }

    // required uint32 cost = 2;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

    // required .IM.Buddy.BasicInfo basic_info = 3;
    if (has_basic_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic_info());
    }

    // required .IM.Buddy.TransportConfig transport_config = 4;
    if (has_transport_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transport_config());
    }

    // required .IM.Buddy.TravelDetail travel_detail = 5;
    if (has_travel_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->travel_detail());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyTravel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MyTravel*>(&from));
}

void MyTravel::MergeFrom(const MyTravel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_db_idx()) {
      set_db_idx(from.db_idx());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_basic_info()) {
      mutable_basic_info()->::IM::Buddy::BasicInfo::MergeFrom(from.basic_info());
    }
    if (from.has_transport_config()) {
      mutable_transport_config()->::IM::Buddy::TransportConfig::MergeFrom(from.transport_config());
    }
    if (from.has_travel_detail()) {
      mutable_travel_detail()->::IM::Buddy::TravelDetail::MergeFrom(from.travel_detail());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void MyTravel::CopyFrom(const MyTravel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyTravel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_basic_info()) {
    if (!this->basic_info().IsInitialized()) return false;
  }
  if (has_transport_config()) {
    if (!this->transport_config().IsInitialized()) return false;
  }
  if (has_travel_detail()) {
    if (!this->travel_detail().IsInitialized()) return false;
  }
  return true;
}

void MyTravel::Swap(MyTravel* other) {
  if (other != this) {
    std::swap(db_idx_, other->db_idx_);
    std::swap(cost_, other->cost_);
    std::swap(basic_info_, other->basic_info_);
    std::swap(transport_config_, other->transport_config_);
    std::swap(travel_detail_, other->travel_detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MyTravel::GetTypeName() const {
  return "IM.Buddy.MyTravel";
}


// ===================================================================

#ifndef _MSC_VER
const int CreateMyTravelReq::kUserIdFieldNumber;
const int CreateMyTravelReq::kMyTravelFieldNumber;
const int CreateMyTravelReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

CreateMyTravelReq::CreateMyTravelReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.CreateMyTravelReq)
}

void CreateMyTravelReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  my_travel_ = const_cast< ::IM::Buddy::MyTravel*>(
      ::IM::Buddy::MyTravel::internal_default_instance());
#else
  my_travel_ = const_cast< ::IM::Buddy::MyTravel*>(&::IM::Buddy::MyTravel::default_instance());
#endif
}

CreateMyTravelReq::CreateMyTravelReq(const CreateMyTravelReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.CreateMyTravelReq)
}

void CreateMyTravelReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  my_travel_ = NULL;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateMyTravelReq::~CreateMyTravelReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.CreateMyTravelReq)
  SharedDtor();
}

void CreateMyTravelReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete my_travel_;
  }
}

void CreateMyTravelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateMyTravelReq& CreateMyTravelReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

CreateMyTravelReq* CreateMyTravelReq::default_instance_ = NULL;

CreateMyTravelReq* CreateMyTravelReq::New() const {
  return new CreateMyTravelReq;
}

void CreateMyTravelReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = 0u;
    if (has_my_travel()) {
      if (my_travel_ != NULL) my_travel_->::IM::Buddy::MyTravel::Clear();
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreateMyTravelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.CreateMyTravelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_my_travel;
        break;
      }

      // required .IM.Buddy.MyTravel my_travel = 2;
      case 2: {
        if (tag == 18) {
         parse_my_travel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_travel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.CreateMyTravelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.CreateMyTravelReq)
  return false;
#undef DO_
}

void CreateMyTravelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.CreateMyTravelReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.Buddy.MyTravel my_travel = 2;
  if (has_my_travel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->my_travel(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.CreateMyTravelReq)
}

int CreateMyTravelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.Buddy.MyTravel my_travel = 2;
    if (has_my_travel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_travel());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateMyTravelReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateMyTravelReq*>(&from));
}

void CreateMyTravelReq::MergeFrom(const CreateMyTravelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_my_travel()) {
      mutable_my_travel()->::IM::Buddy::MyTravel::MergeFrom(from.my_travel());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreateMyTravelReq::CopyFrom(const CreateMyTravelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMyTravelReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_my_travel()) {
    if (!this->my_travel().IsInitialized()) return false;
  }
  return true;
}

void CreateMyTravelReq::Swap(CreateMyTravelReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(my_travel_, other->my_travel_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateMyTravelReq::GetTypeName() const {
  return "IM.Buddy.CreateMyTravelReq";
}


// ===================================================================

#ifndef _MSC_VER
const int CreateMyTravelRsp::kUserIdFieldNumber;
const int CreateMyTravelRsp::kResultCodeFieldNumber;
const int CreateMyTravelRsp::kDbIdxFieldNumber;
const int CreateMyTravelRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

CreateMyTravelRsp::CreateMyTravelRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.CreateMyTravelRsp)
}

void CreateMyTravelRsp::InitAsDefaultInstance() {
}

CreateMyTravelRsp::CreateMyTravelRsp(const CreateMyTravelRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.CreateMyTravelRsp)
}

void CreateMyTravelRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  db_idx_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateMyTravelRsp::~CreateMyTravelRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.CreateMyTravelRsp)
  SharedDtor();
}

void CreateMyTravelRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CreateMyTravelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateMyTravelRsp& CreateMyTravelRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

CreateMyTravelRsp* CreateMyTravelRsp::default_instance_ = NULL;

CreateMyTravelRsp* CreateMyTravelRsp::New() const {
  return new CreateMyTravelRsp;
}

void CreateMyTravelRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateMyTravelRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, result_code_);
    db_idx_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CreateMyTravelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.CreateMyTravelRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_db_idx;
        break;
      }

      // required uint32 db_idx = 3;
      case 3: {
        if (tag == 24) {
         parse_db_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_idx_)));
          set_has_db_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.CreateMyTravelRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.CreateMyTravelRsp)
  return false;
#undef DO_
}

void CreateMyTravelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.CreateMyTravelRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // required uint32 db_idx = 3;
  if (has_db_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->db_idx(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.CreateMyTravelRsp)
}

int CreateMyTravelRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required uint32 db_idx = 3;
    if (has_db_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_idx());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateMyTravelRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateMyTravelRsp*>(&from));
}

void CreateMyTravelRsp::MergeFrom(const CreateMyTravelRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_db_idx()) {
      set_db_idx(from.db_idx());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CreateMyTravelRsp::CopyFrom(const CreateMyTravelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMyTravelRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CreateMyTravelRsp::Swap(CreateMyTravelRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(db_idx_, other->db_idx_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CreateMyTravelRsp::GetTypeName() const {
  return "IM.Buddy.CreateMyTravelRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteMyTravelReq::kUserIdFieldNumber;
const int DeleteMyTravelReq::kDbIdxFieldNumber;
const int DeleteMyTravelReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

DeleteMyTravelReq::DeleteMyTravelReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.DeleteMyTravelReq)
}

void DeleteMyTravelReq::InitAsDefaultInstance() {
}

DeleteMyTravelReq::DeleteMyTravelReq(const DeleteMyTravelReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.DeleteMyTravelReq)
}

void DeleteMyTravelReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteMyTravelReq::~DeleteMyTravelReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.DeleteMyTravelReq)
  SharedDtor();
}

void DeleteMyTravelReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteMyTravelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteMyTravelReq& DeleteMyTravelReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

DeleteMyTravelReq* DeleteMyTravelReq::default_instance_ = NULL;

DeleteMyTravelReq* DeleteMyTravelReq::New() const {
  return new DeleteMyTravelReq;
}

void DeleteMyTravelReq::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  db_idx_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteMyTravelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.DeleteMyTravelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_db_idx;
        break;
      }

      // repeated uint32 db_idx = 2;
      case 2: {
        if (tag == 16) {
         parse_db_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_db_idx())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_db_idx())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_db_idx;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.DeleteMyTravelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.DeleteMyTravelReq)
  return false;
#undef DO_
}

void DeleteMyTravelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.DeleteMyTravelReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated uint32 db_idx = 2;
  for (int i = 0; i < this->db_idx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->db_idx(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.DeleteMyTravelReq)
}

int DeleteMyTravelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 db_idx = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->db_idx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->db_idx(i));
    }
    total_size += 1 * this->db_idx_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteMyTravelReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteMyTravelReq*>(&from));
}

void DeleteMyTravelReq::MergeFrom(const DeleteMyTravelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  db_idx_.MergeFrom(from.db_idx_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteMyTravelReq::CopyFrom(const DeleteMyTravelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMyTravelReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteMyTravelReq::Swap(DeleteMyTravelReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    db_idx_.Swap(&other->db_idx_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteMyTravelReq::GetTypeName() const {
  return "IM.Buddy.DeleteMyTravelReq";
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteMyTravelRsp::kUserIdFieldNumber;
const int DeleteMyTravelRsp::kResultCodeFieldNumber;
const int DeleteMyTravelRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

DeleteMyTravelRsp::DeleteMyTravelRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.DeleteMyTravelRsp)
}

void DeleteMyTravelRsp::InitAsDefaultInstance() {
}

DeleteMyTravelRsp::DeleteMyTravelRsp(const DeleteMyTravelRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.DeleteMyTravelRsp)
}

void DeleteMyTravelRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteMyTravelRsp::~DeleteMyTravelRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.DeleteMyTravelRsp)
  SharedDtor();
}

void DeleteMyTravelRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeleteMyTravelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeleteMyTravelRsp& DeleteMyTravelRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

DeleteMyTravelRsp* DeleteMyTravelRsp::default_instance_ = NULL;

DeleteMyTravelRsp* DeleteMyTravelRsp::New() const {
  return new DeleteMyTravelRsp;
}

void DeleteMyTravelRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeleteMyTravelRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, result_code_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DeleteMyTravelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.DeleteMyTravelRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.DeleteMyTravelRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.DeleteMyTravelRsp)
  return false;
#undef DO_
}

void DeleteMyTravelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.DeleteMyTravelRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.DeleteMyTravelRsp)
}

int DeleteMyTravelRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteMyTravelRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeleteMyTravelRsp*>(&from));
}

void DeleteMyTravelRsp::MergeFrom(const DeleteMyTravelRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DeleteMyTravelRsp::CopyFrom(const DeleteMyTravelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMyTravelRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeleteMyTravelRsp::Swap(DeleteMyTravelRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DeleteMyTravelRsp::GetTypeName() const {
  return "IM.Buddy.DeleteMyTravelRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateMyTravelReq::kUserIdFieldNumber;
const int UpdateMyTravelReq::kDbIdxFieldNumber;
const int UpdateMyTravelReq::kMyTravelFieldNumber;
const int UpdateMyTravelReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

UpdateMyTravelReq::UpdateMyTravelReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.UpdateMyTravelReq)
}

void UpdateMyTravelReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  my_travel_ = const_cast< ::IM::Buddy::MyTravel*>(
      ::IM::Buddy::MyTravel::internal_default_instance());
#else
  my_travel_ = const_cast< ::IM::Buddy::MyTravel*>(&::IM::Buddy::MyTravel::default_instance());
#endif
}

UpdateMyTravelReq::UpdateMyTravelReq(const UpdateMyTravelReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.UpdateMyTravelReq)
}

void UpdateMyTravelReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  db_idx_ = 0u;
  my_travel_ = NULL;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateMyTravelReq::~UpdateMyTravelReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.UpdateMyTravelReq)
  SharedDtor();
}

void UpdateMyTravelReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete my_travel_;
  }
}

void UpdateMyTravelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateMyTravelReq& UpdateMyTravelReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

UpdateMyTravelReq* UpdateMyTravelReq::default_instance_ = NULL;

UpdateMyTravelReq* UpdateMyTravelReq::New() const {
  return new UpdateMyTravelReq;
}

void UpdateMyTravelReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateMyTravelReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, db_idx_);
    if (has_my_travel()) {
      if (my_travel_ != NULL) my_travel_->::IM::Buddy::MyTravel::Clear();
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UpdateMyTravelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.UpdateMyTravelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_db_idx;
        break;
      }

      // required uint32 db_idx = 2;
      case 2: {
        if (tag == 16) {
         parse_db_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_idx_)));
          set_has_db_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_my_travel;
        break;
      }

      // required .IM.Buddy.MyTravel my_travel = 3;
      case 3: {
        if (tag == 26) {
         parse_my_travel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_travel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.UpdateMyTravelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.UpdateMyTravelReq)
  return false;
#undef DO_
}

void UpdateMyTravelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.UpdateMyTravelReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 db_idx = 2;
  if (has_db_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->db_idx(), output);
  }

  // required .IM.Buddy.MyTravel my_travel = 3;
  if (has_my_travel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->my_travel(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.UpdateMyTravelReq)
}

int UpdateMyTravelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 db_idx = 2;
    if (has_db_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->db_idx());
    }

    // required .IM.Buddy.MyTravel my_travel = 3;
    if (has_my_travel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_travel());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateMyTravelReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateMyTravelReq*>(&from));
}

void UpdateMyTravelReq::MergeFrom(const UpdateMyTravelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_db_idx()) {
      set_db_idx(from.db_idx());
    }
    if (from.has_my_travel()) {
      mutable_my_travel()->::IM::Buddy::MyTravel::MergeFrom(from.my_travel());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UpdateMyTravelReq::CopyFrom(const UpdateMyTravelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMyTravelReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_my_travel()) {
    if (!this->my_travel().IsInitialized()) return false;
  }
  return true;
}

void UpdateMyTravelReq::Swap(UpdateMyTravelReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(db_idx_, other->db_idx_);
    std::swap(my_travel_, other->my_travel_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateMyTravelReq::GetTypeName() const {
  return "IM.Buddy.UpdateMyTravelReq";
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateMyTravelRsp::kUserIdFieldNumber;
const int UpdateMyTravelRsp::kResultCodeFieldNumber;
const int UpdateMyTravelRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

UpdateMyTravelRsp::UpdateMyTravelRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.UpdateMyTravelRsp)
}

void UpdateMyTravelRsp::InitAsDefaultInstance() {
}

UpdateMyTravelRsp::UpdateMyTravelRsp(const UpdateMyTravelRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.UpdateMyTravelRsp)
}

void UpdateMyTravelRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateMyTravelRsp::~UpdateMyTravelRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.UpdateMyTravelRsp)
  SharedDtor();
}

void UpdateMyTravelRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateMyTravelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateMyTravelRsp& UpdateMyTravelRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

UpdateMyTravelRsp* UpdateMyTravelRsp::default_instance_ = NULL;

UpdateMyTravelRsp* UpdateMyTravelRsp::New() const {
  return new UpdateMyTravelRsp;
}

void UpdateMyTravelRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateMyTravelRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, result_code_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool UpdateMyTravelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.UpdateMyTravelRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.UpdateMyTravelRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.UpdateMyTravelRsp)
  return false;
#undef DO_
}

void UpdateMyTravelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.UpdateMyTravelRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.UpdateMyTravelRsp)
}

int UpdateMyTravelRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateMyTravelRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateMyTravelRsp*>(&from));
}

void UpdateMyTravelRsp::MergeFrom(const UpdateMyTravelRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void UpdateMyTravelRsp::CopyFrom(const UpdateMyTravelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMyTravelRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateMyTravelRsp::Swap(UpdateMyTravelRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateMyTravelRsp::GetTypeName() const {
  return "IM.Buddy.UpdateMyTravelRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int QueryMyTravelReq::kUserIdFieldNumber;
const int QueryMyTravelReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

QueryMyTravelReq::QueryMyTravelReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.QueryMyTravelReq)
}

void QueryMyTravelReq::InitAsDefaultInstance() {
}

QueryMyTravelReq::QueryMyTravelReq(const QueryMyTravelReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.QueryMyTravelReq)
}

void QueryMyTravelReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryMyTravelReq::~QueryMyTravelReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.QueryMyTravelReq)
  SharedDtor();
}

void QueryMyTravelReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QueryMyTravelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QueryMyTravelReq& QueryMyTravelReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

QueryMyTravelReq* QueryMyTravelReq::default_instance_ = NULL;

QueryMyTravelReq* QueryMyTravelReq::New() const {
  return new QueryMyTravelReq;
}

void QueryMyTravelReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool QueryMyTravelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.QueryMyTravelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.QueryMyTravelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.QueryMyTravelReq)
  return false;
#undef DO_
}

void QueryMyTravelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.QueryMyTravelReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.QueryMyTravelReq)
}

int QueryMyTravelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMyTravelReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QueryMyTravelReq*>(&from));
}

void QueryMyTravelReq::MergeFrom(const QueryMyTravelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void QueryMyTravelReq::CopyFrom(const QueryMyTravelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMyTravelReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryMyTravelReq::Swap(QueryMyTravelReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QueryMyTravelReq::GetTypeName() const {
  return "IM.Buddy.QueryMyTravelReq";
}


// ===================================================================

#ifndef _MSC_VER
const int QueryMyTravelRsp::kUserIdFieldNumber;
const int QueryMyTravelRsp::kResultCodeFieldNumber;
const int QueryMyTravelRsp::kMyTravelFieldNumber;
const int QueryMyTravelRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

QueryMyTravelRsp::QueryMyTravelRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.QueryMyTravelRsp)
}

void QueryMyTravelRsp::InitAsDefaultInstance() {
}

QueryMyTravelRsp::QueryMyTravelRsp(const QueryMyTravelRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.QueryMyTravelRsp)
}

void QueryMyTravelRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryMyTravelRsp::~QueryMyTravelRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.QueryMyTravelRsp)
  SharedDtor();
}

void QueryMyTravelRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QueryMyTravelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QueryMyTravelRsp& QueryMyTravelRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

QueryMyTravelRsp* QueryMyTravelRsp::default_instance_ = NULL;

QueryMyTravelRsp* QueryMyTravelRsp::New() const {
  return new QueryMyTravelRsp;
}

void QueryMyTravelRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryMyTravelRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(user_id_, result_code_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  my_travel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool QueryMyTravelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.QueryMyTravelRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_my_travel;
        break;
      }

      // repeated .IM.Buddy.MyTravel my_travel = 3;
      case 3: {
        if (tag == 26) {
         parse_my_travel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_my_travel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_my_travel;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.QueryMyTravelRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.QueryMyTravelRsp)
  return false;
#undef DO_
}

void QueryMyTravelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.QueryMyTravelRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // repeated .IM.Buddy.MyTravel my_travel = 3;
  for (int i = 0; i < this->my_travel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->my_travel(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.QueryMyTravelRsp)
}

int QueryMyTravelRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.Buddy.MyTravel my_travel = 3;
  total_size += 1 * this->my_travel_size();
  for (int i = 0; i < this->my_travel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->my_travel(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMyTravelRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QueryMyTravelRsp*>(&from));
}

void QueryMyTravelRsp::MergeFrom(const QueryMyTravelRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  my_travel_.MergeFrom(from.my_travel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void QueryMyTravelRsp::CopyFrom(const QueryMyTravelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMyTravelRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->my_travel())) return false;
  return true;
}

void QueryMyTravelRsp::Swap(QueryMyTravelRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    my_travel_.Swap(&other->my_travel_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QueryMyTravelRsp::GetTypeName() const {
  return "IM.Buddy.QueryMyTravelRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int GetTransportToolReq::kUserIdFieldNumber;
const int GetTransportToolReq::kBasicInfoFieldNumber;
const int GetTransportToolReq::kTransportConfigFieldNumber;
const int GetTransportToolReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

GetTransportToolReq::GetTransportToolReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.GetTransportToolReq)
}

void GetTransportToolReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  basic_info_ = const_cast< ::IM::Buddy::BasicInfo*>(
      ::IM::Buddy::BasicInfo::internal_default_instance());
#else
  basic_info_ = const_cast< ::IM::Buddy::BasicInfo*>(&::IM::Buddy::BasicInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  transport_config_ = const_cast< ::IM::Buddy::TransportConfig*>(
      ::IM::Buddy::TransportConfig::internal_default_instance());
#else
  transport_config_ = const_cast< ::IM::Buddy::TransportConfig*>(&::IM::Buddy::TransportConfig::default_instance());
#endif
}

GetTransportToolReq::GetTransportToolReq(const GetTransportToolReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.GetTransportToolReq)
}

void GetTransportToolReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  basic_info_ = NULL;
  transport_config_ = NULL;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTransportToolReq::~GetTransportToolReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.GetTransportToolReq)
  SharedDtor();
}

void GetTransportToolReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete basic_info_;
    delete transport_config_;
  }
}

void GetTransportToolReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetTransportToolReq& GetTransportToolReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

GetTransportToolReq* GetTransportToolReq::default_instance_ = NULL;

GetTransportToolReq* GetTransportToolReq::New() const {
  return new GetTransportToolReq;
}

void GetTransportToolReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    user_id_ = 0u;
    if (has_basic_info()) {
      if (basic_info_ != NULL) basic_info_->::IM::Buddy::BasicInfo::Clear();
    }
    if (has_transport_config()) {
      if (transport_config_ != NULL) transport_config_->::IM::Buddy::TransportConfig::Clear();
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetTransportToolReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.GetTransportToolReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_basic_info;
        break;
      }

      // required .IM.Buddy.BasicInfo basic_info = 2;
      case 2: {
        if (tag == 18) {
         parse_basic_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transport_config;
        break;
      }

      // required .IM.Buddy.TransportConfig transport_config = 3;
      case 3: {
        if (tag == 26) {
         parse_transport_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transport_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.GetTransportToolReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.GetTransportToolReq)
  return false;
#undef DO_
}

void GetTransportToolReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.GetTransportToolReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.Buddy.BasicInfo basic_info = 2;
  if (has_basic_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->basic_info(), output);
  }

  // required .IM.Buddy.TransportConfig transport_config = 3;
  if (has_transport_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->transport_config(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.GetTransportToolReq)
}

int GetTransportToolReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.Buddy.BasicInfo basic_info = 2;
    if (has_basic_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic_info());
    }

    // required .IM.Buddy.TransportConfig transport_config = 3;
    if (has_transport_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transport_config());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTransportToolReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetTransportToolReq*>(&from));
}

void GetTransportToolReq::MergeFrom(const GetTransportToolReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_basic_info()) {
      mutable_basic_info()->::IM::Buddy::BasicInfo::MergeFrom(from.basic_info());
    }
    if (from.has_transport_config()) {
      mutable_transport_config()->::IM::Buddy::TransportConfig::MergeFrom(from.transport_config());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetTransportToolReq::CopyFrom(const GetTransportToolReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransportToolReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_basic_info()) {
    if (!this->basic_info().IsInitialized()) return false;
  }
  if (has_transport_config()) {
    if (!this->transport_config().IsInitialized()) return false;
  }
  return true;
}

void GetTransportToolReq::Swap(GetTransportToolReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(basic_info_, other->basic_info_);
    std::swap(transport_config_, other->transport_config_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetTransportToolReq::GetTypeName() const {
  return "IM.Buddy.GetTransportToolReq";
}


// ===================================================================

#ifndef _MSC_VER
const int GetTransportToolRsp::kUserIdFieldNumber;
const int GetTransportToolRsp::kResultCodeFieldNumber;
const int GetTransportToolRsp::kTravelToolInfoFieldNumber;
const int GetTransportToolRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

GetTransportToolRsp::GetTransportToolRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.GetTransportToolRsp)
}

void GetTransportToolRsp::InitAsDefaultInstance() {
}

GetTransportToolRsp::GetTransportToolRsp(const GetTransportToolRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.GetTransportToolRsp)
}

void GetTransportToolRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTransportToolRsp::~GetTransportToolRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.GetTransportToolRsp)
  SharedDtor();
}

void GetTransportToolRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetTransportToolRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetTransportToolRsp& GetTransportToolRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

GetTransportToolRsp* GetTransportToolRsp::default_instance_ = NULL;

GetTransportToolRsp* GetTransportToolRsp::New() const {
  return new GetTransportToolRsp;
}

void GetTransportToolRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetTransportToolRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(user_id_, result_code_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  travel_tool_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetTransportToolRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.GetTransportToolRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_travel_tool_info;
        break;
      }

      // repeated .IM.Buddy.TravelToolInfo travel_tool_info = 3;
      case 3: {
        if (tag == 26) {
         parse_travel_tool_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_travel_tool_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_travel_tool_info;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.GetTransportToolRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.GetTransportToolRsp)
  return false;
#undef DO_
}

void GetTransportToolRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.GetTransportToolRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // repeated .IM.Buddy.TravelToolInfo travel_tool_info = 3;
  for (int i = 0; i < this->travel_tool_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->travel_tool_info(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.GetTransportToolRsp)
}

int GetTransportToolRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.Buddy.TravelToolInfo travel_tool_info = 3;
  total_size += 1 * this->travel_tool_info_size();
  for (int i = 0; i < this->travel_tool_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->travel_tool_info(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTransportToolRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetTransportToolRsp*>(&from));
}

void GetTransportToolRsp::MergeFrom(const GetTransportToolRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  travel_tool_info_.MergeFrom(from.travel_tool_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetTransportToolRsp::CopyFrom(const GetTransportToolRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransportToolRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->travel_tool_info())) return false;
  return true;
}

void GetTransportToolRsp::Swap(GetTransportToolRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    travel_tool_info_.Swap(&other->travel_tool_info_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetTransportToolRsp::GetTypeName() const {
  return "IM.Buddy.GetTransportToolRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int GetScenicHotelReq::kUserIdFieldNumber;
const int GetScenicHotelReq::kCityCodeFieldNumber;
const int GetScenicHotelReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

GetScenicHotelReq::GetScenicHotelReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.GetScenicHotelReq)
}

void GetScenicHotelReq::InitAsDefaultInstance() {
}

GetScenicHotelReq::GetScenicHotelReq(const GetScenicHotelReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.GetScenicHotelReq)
}

void GetScenicHotelReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  city_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetScenicHotelReq::~GetScenicHotelReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.GetScenicHotelReq)
  SharedDtor();
}

void GetScenicHotelReq::SharedDtor() {
  if (city_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_code_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetScenicHotelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetScenicHotelReq& GetScenicHotelReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

GetScenicHotelReq* GetScenicHotelReq::default_instance_ = NULL;

GetScenicHotelReq* GetScenicHotelReq::New() const {
  return new GetScenicHotelReq;
}

void GetScenicHotelReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = 0u;
    if (has_city_code()) {
      if (city_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_code_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetScenicHotelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.GetScenicHotelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_city_code;
        break;
      }

      // required string city_code = 2;
      case 2: {
        if (tag == 18) {
         parse_city_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.GetScenicHotelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.GetScenicHotelReq)
  return false;
#undef DO_
}

void GetScenicHotelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.GetScenicHotelReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required string city_code = 2;
  if (has_city_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->city_code(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.GetScenicHotelReq)
}

int GetScenicHotelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string city_code = 2;
    if (has_city_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetScenicHotelReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetScenicHotelReq*>(&from));
}

void GetScenicHotelReq::MergeFrom(const GetScenicHotelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_city_code()) {
      set_city_code(from.city_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetScenicHotelReq::CopyFrom(const GetScenicHotelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetScenicHotelReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetScenicHotelReq::Swap(GetScenicHotelReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(city_code_, other->city_code_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetScenicHotelReq::GetTypeName() const {
  return "IM.Buddy.GetScenicHotelReq";
}


// ===================================================================

#ifndef _MSC_VER
const int GetScenicHotelRsp::kUserIdFieldNumber;
const int GetScenicHotelRsp::kResultCodeFieldNumber;
const int GetScenicHotelRsp::kScenicInfoFieldNumber;
const int GetScenicHotelRsp::kHotelInfoFieldNumber;
const int GetScenicHotelRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

GetScenicHotelRsp::GetScenicHotelRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.GetScenicHotelRsp)
}

void GetScenicHotelRsp::InitAsDefaultInstance() {
}

GetScenicHotelRsp::GetScenicHotelRsp(const GetScenicHotelRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.GetScenicHotelRsp)
}

void GetScenicHotelRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetScenicHotelRsp::~GetScenicHotelRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.GetScenicHotelRsp)
  SharedDtor();
}

void GetScenicHotelRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetScenicHotelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetScenicHotelRsp& GetScenicHotelRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

GetScenicHotelRsp* GetScenicHotelRsp::default_instance_ = NULL;

GetScenicHotelRsp* GetScenicHotelRsp::New() const {
  return new GetScenicHotelRsp;
}

void GetScenicHotelRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetScenicHotelRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 19) {
    ZR_(user_id_, result_code_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  scenic_info_.Clear();
  hotel_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool GetScenicHotelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.GetScenicHotelRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_scenic_info;
        break;
      }

      // repeated .IM.Buddy.ScenicInfo scenic_info = 3;
      case 3: {
        if (tag == 26) {
         parse_scenic_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scenic_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_scenic_info;
        if (input->ExpectTag(34)) goto parse_hotel_info;
        break;
      }

      // repeated .IM.Buddy.HotelInfo hotel_info = 4;
      case 4: {
        if (tag == 34) {
         parse_hotel_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hotel_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hotel_info;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.GetScenicHotelRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.GetScenicHotelRsp)
  return false;
#undef DO_
}

void GetScenicHotelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.GetScenicHotelRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // repeated .IM.Buddy.ScenicInfo scenic_info = 3;
  for (int i = 0; i < this->scenic_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->scenic_info(i), output);
  }

  // repeated .IM.Buddy.HotelInfo hotel_info = 4;
  for (int i = 0; i < this->hotel_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->hotel_info(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.GetScenicHotelRsp)
}

int GetScenicHotelRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.Buddy.ScenicInfo scenic_info = 3;
  total_size += 1 * this->scenic_info_size();
  for (int i = 0; i < this->scenic_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scenic_info(i));
  }

  // repeated .IM.Buddy.HotelInfo hotel_info = 4;
  total_size += 1 * this->hotel_info_size();
  for (int i = 0; i < this->hotel_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hotel_info(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetScenicHotelRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetScenicHotelRsp*>(&from));
}

void GetScenicHotelRsp::MergeFrom(const GetScenicHotelRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  scenic_info_.MergeFrom(from.scenic_info_);
  hotel_info_.MergeFrom(from.hotel_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetScenicHotelRsp::CopyFrom(const GetScenicHotelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetScenicHotelRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->scenic_info())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->hotel_info())) return false;
  return true;
}

void GetScenicHotelRsp::Swap(GetScenicHotelRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    scenic_info_.Swap(&other->scenic_info_);
    hotel_info_.Swap(&other->hotel_info_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetScenicHotelRsp::GetTypeName() const {
  return "IM.Buddy.GetScenicHotelRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int DayRoute::kScenicsFieldNumber;
const int DayRoute::kHotelsFieldNumber;
#endif  // !_MSC_VER

DayRoute::DayRoute()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.DayRoute)
}

void DayRoute::InitAsDefaultInstance() {
}

DayRoute::DayRoute(const DayRoute& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.DayRoute)
}

void DayRoute::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayRoute::~DayRoute() {
  // @@protoc_insertion_point(destructor:IM.Buddy.DayRoute)
  SharedDtor();
}

void DayRoute::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DayRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DayRoute& DayRoute::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

DayRoute* DayRoute::default_instance_ = NULL;

DayRoute* DayRoute::New() const {
  return new DayRoute;
}

void DayRoute::Clear() {
  scenics_.Clear();
  hotels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool DayRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.DayRoute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 scenics = 1;
      case 1: {
        if (tag == 8) {
         parse_scenics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_scenics())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_scenics())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_scenics;
        if (input->ExpectTag(16)) goto parse_hotels;
        break;
      }

      // repeated uint32 hotels = 2;
      case 2: {
        if (tag == 16) {
         parse_hotels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_hotels())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hotels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hotels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.DayRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.DayRoute)
  return false;
#undef DO_
}

void DayRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.DayRoute)
  // repeated uint32 scenics = 1;
  for (int i = 0; i < this->scenics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->scenics(i), output);
  }

  // repeated uint32 hotels = 2;
  for (int i = 0; i < this->hotels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->hotels(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.DayRoute)
}

int DayRoute::ByteSize() const {
  int total_size = 0;

  // repeated uint32 scenics = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->scenics_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->scenics(i));
    }
    total_size += 1 * this->scenics_size() + data_size;
  }

  // repeated uint32 hotels = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hotels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hotels(i));
    }
    total_size += 1 * this->hotels_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayRoute::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DayRoute*>(&from));
}

void DayRoute::MergeFrom(const DayRoute& from) {
  GOOGLE_CHECK_NE(&from, this);
  scenics_.MergeFrom(from.scenics_);
  hotels_.MergeFrom(from.hotels_);
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DayRoute::CopyFrom(const DayRoute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayRoute::IsInitialized() const {

  return true;
}

void DayRoute::Swap(DayRoute* other) {
  if (other != this) {
    scenics_.Swap(&other->scenics_);
    hotels_.Swap(&other->hotels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DayRoute::GetTypeName() const {
  return "IM.Buddy.DayRoute";
}


// ===================================================================

#ifndef _MSC_VER
const int Route::kIdFieldNumber;
const int Route::kDayCountFieldNumber;
const int Route::kCityCodeFieldNumber;
const int Route::kTagFieldNumber;
const int Route::kStartTransportToolFieldNumber;
const int Route::kEndTransportToolFieldNumber;
const int Route::kStartTimeFieldNumber;
const int Route::kEndTimeFieldNumber;
const int Route::kDayRoutesFieldNumber;
#endif  // !_MSC_VER

Route::Route()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.Route)
}

void Route::InitAsDefaultInstance() {
}

Route::Route(const Route& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.Route)
}

void Route::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  day_count_ = 0u;
  city_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_transport_tool_ = 1;
  end_transport_tool_ = 1;
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:IM.Buddy.Route)
  SharedDtor();
}

void Route::SharedDtor() {
  if (city_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_code_;
  }
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Route::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Route& Route::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

Route* Route::default_instance_ = NULL;

Route* Route::New() const {
  return new Route;
}

void Route::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Route*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(id_, day_count_);
    if (has_city_code()) {
      if (city_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_code_->clear();
      }
    }
    start_transport_tool_ = 1;
    end_transport_tool_ = 1;
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_time_->clear();
      }
    }
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_time_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  tag_.Clear();
  day_routes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Route::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.Route)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_day_count;
        break;
      }

      // required uint32 day_count = 2;
      case 2: {
        if (tag == 16) {
         parse_day_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_count_)));
          set_has_day_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_city_code;
        break;
      }

      // required string city_code = 3;
      case 3: {
        if (tag == 26) {
         parse_city_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tag;
        break;
      }

      // repeated string tag = 4;
      case 4: {
        if (tag == 34) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tag;
        if (input->ExpectTag(40)) goto parse_start_transport_tool;
        break;
      }

      // required .IM.Buddy.TransportToolType start_transport_tool = 5;
      case 5: {
        if (tag == 40) {
         parse_start_transport_tool:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::Buddy::TransportToolType_IsValid(value)) {
            set_start_transport_tool(static_cast< ::IM::Buddy::TransportToolType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_end_transport_tool;
        break;
      }

      // required .IM.Buddy.TransportToolType end_transport_tool = 6;
      case 6: {
        if (tag == 48) {
         parse_end_transport_tool:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::Buddy::TransportToolType_IsValid(value)) {
            set_end_transport_tool(static_cast< ::IM::Buddy::TransportToolType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_start_time;
        break;
      }

      // required string start_time = 7;
      case 7: {
        if (tag == 58) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_end_time;
        break;
      }

      // required string end_time = 8;
      case 8: {
        if (tag == 66) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_day_routes;
        break;
      }

      // repeated .IM.Buddy.DayRoute day_routes = 9;
      case 9: {
        if (tag == 74) {
         parse_day_routes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_day_routes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_day_routes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.Route)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.Route)
  return false;
#undef DO_
}

void Route::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.Route)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 day_count = 2;
  if (has_day_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->day_count(), output);
  }

  // required string city_code = 3;
  if (has_city_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->city_code(), output);
  }

  // repeated string tag = 4;
  for (int i = 0; i < this->tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tag(i), output);
  }

  // required .IM.Buddy.TransportToolType start_transport_tool = 5;
  if (has_start_transport_tool()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->start_transport_tool(), output);
  }

  // required .IM.Buddy.TransportToolType end_transport_tool = 6;
  if (has_end_transport_tool()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->end_transport_tool(), output);
  }

  // required string start_time = 7;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->start_time(), output);
  }

  // required string end_time = 8;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->end_time(), output);
  }

  // repeated .IM.Buddy.DayRoute day_routes = 9;
  for (int i = 0; i < this->day_routes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->day_routes(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.Route)
}

int Route::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 day_count = 2;
    if (has_day_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day_count());
    }

    // required string city_code = 3;
    if (has_city_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city_code());
    }

    // required .IM.Buddy.TransportToolType start_transport_tool = 5;
    if (has_start_transport_tool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->start_transport_tool());
    }

    // required .IM.Buddy.TransportToolType end_transport_tool = 6;
    if (has_end_transport_tool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->end_transport_tool());
    }

    // required string start_time = 7;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_time());
    }

    // required string end_time = 8;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_time());
    }

  }
  // repeated string tag = 4;
  total_size += 1 * this->tag_size();
  for (int i = 0; i < this->tag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tag(i));
  }

  // repeated .IM.Buddy.DayRoute day_routes = 9;
  total_size += 1 * this->day_routes_size();
  for (int i = 0; i < this->day_routes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->day_routes(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Route::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Route*>(&from));
}

void Route::MergeFrom(const Route& from) {
  GOOGLE_CHECK_NE(&from, this);
  tag_.MergeFrom(from.tag_);
  day_routes_.MergeFrom(from.day_routes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_day_count()) {
      set_day_count(from.day_count());
    }
    if (from.has_city_code()) {
      set_city_code(from.city_code());
    }
    if (from.has_start_transport_tool()) {
      set_start_transport_tool(from.start_transport_tool());
    }
    if (from.has_end_transport_tool()) {
      set_end_transport_tool(from.end_transport_tool());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Route::CopyFrom(const Route& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000f7) != 0x000000f7) return false;

  return true;
}

void Route::Swap(Route* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(day_count_, other->day_count_);
    std::swap(city_code_, other->city_code_);
    tag_.Swap(&other->tag_);
    std::swap(start_transport_tool_, other->start_transport_tool_);
    std::swap(end_transport_tool_, other->end_transport_tool_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    day_routes_.Swap(&other->day_routes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Route::GetTypeName() const {
  return "IM.Buddy.Route";
}


// ===================================================================

#ifndef _MSC_VER
const int CollectionRoute::kIdFieldNumber;
const int CollectionRoute::kStartDateFieldNumber;
const int CollectionRoute::kEndDateFieldNumber;
const int CollectionRoute::kStartTrafficNoFieldNumber;
const int CollectionRoute::kEndTrafficNoFieldNumber;
const int CollectionRoute::kRouteFieldNumber;
#endif  // !_MSC_VER

CollectionRoute::CollectionRoute()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.CollectionRoute)
}

void CollectionRoute::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  route_ = const_cast< ::IM::Buddy::Route*>(
      ::IM::Buddy::Route::internal_default_instance());
#else
  route_ = const_cast< ::IM::Buddy::Route*>(&::IM::Buddy::Route::default_instance());
#endif
}

CollectionRoute::CollectionRoute(const CollectionRoute& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.CollectionRoute)
}

void CollectionRoute::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  start_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_traffic_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_traffic_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  route_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollectionRoute::~CollectionRoute() {
  // @@protoc_insertion_point(destructor:IM.Buddy.CollectionRoute)
  SharedDtor();
}

void CollectionRoute::SharedDtor() {
  if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_date_;
  }
  if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_date_;
  }
  if (start_traffic_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_traffic_no_;
  }
  if (end_traffic_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_traffic_no_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete route_;
  }
}

void CollectionRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CollectionRoute& CollectionRoute::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

CollectionRoute* CollectionRoute::default_instance_ = NULL;

CollectionRoute* CollectionRoute::New() const {
  return new CollectionRoute;
}

void CollectionRoute::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    id_ = 0u;
    if (has_start_date()) {
      if (start_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_date_->clear();
      }
    }
    if (has_end_date()) {
      if (end_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_date_->clear();
      }
    }
    if (has_start_traffic_no()) {
      if (start_traffic_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_traffic_no_->clear();
      }
    }
    if (has_end_traffic_no()) {
      if (end_traffic_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_traffic_no_->clear();
      }
    }
    if (has_route()) {
      if (route_ != NULL) route_->::IM::Buddy::Route::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool CollectionRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.CollectionRoute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_date;
        break;
      }

      // required string start_date = 2;
      case 2: {
        if (tag == 18) {
         parse_start_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_date;
        break;
      }

      // required string end_date = 3;
      case 3: {
        if (tag == 26) {
         parse_end_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_start_traffic_no;
        break;
      }

      // required string start_traffic_no = 4;
      case 4: {
        if (tag == 34) {
         parse_start_traffic_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_traffic_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_end_traffic_no;
        break;
      }

      // required string end_traffic_no = 5;
      case 5: {
        if (tag == 42) {
         parse_end_traffic_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_traffic_no()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_route;
        break;
      }

      // required .IM.Buddy.Route route = 6;
      case 6: {
        if (tag == 50) {
         parse_route:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.CollectionRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.CollectionRoute)
  return false;
#undef DO_
}

void CollectionRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.CollectionRoute)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string start_date = 2;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->start_date(), output);
  }

  // required string end_date = 3;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->end_date(), output);
  }

  // required string start_traffic_no = 4;
  if (has_start_traffic_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->start_traffic_no(), output);
  }

  // required string end_traffic_no = 5;
  if (has_end_traffic_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->end_traffic_no(), output);
  }

  // required .IM.Buddy.Route route = 6;
  if (has_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->route(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.CollectionRoute)
}

int CollectionRoute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string start_date = 2;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_date());
    }

    // required string end_date = 3;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_date());
    }

    // required string start_traffic_no = 4;
    if (has_start_traffic_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_traffic_no());
    }

    // required string end_traffic_no = 5;
    if (has_end_traffic_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_traffic_no());
    }

    // required .IM.Buddy.Route route = 6;
    if (has_route()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->route());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectionRoute::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CollectionRoute*>(&from));
}

void CollectionRoute::MergeFrom(const CollectionRoute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_start_traffic_no()) {
      set_start_traffic_no(from.start_traffic_no());
    }
    if (from.has_end_traffic_no()) {
      set_end_traffic_no(from.end_traffic_no());
    }
    if (from.has_route()) {
      mutable_route()->::IM::Buddy::Route::MergeFrom(from.route());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CollectionRoute::CopyFrom(const CollectionRoute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionRoute::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_route()) {
    if (!this->route().IsInitialized()) return false;
  }
  return true;
}

void CollectionRoute::Swap(CollectionRoute* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(start_date_, other->start_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(start_traffic_no_, other->start_traffic_no_);
    std::swap(end_traffic_no_, other->end_traffic_no_);
    std::swap(route_, other->route_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CollectionRoute::GetTypeName() const {
  return "IM.Buddy.CollectionRoute";
}


// ===================================================================

#ifndef _MSC_VER
const int NewQueryRadomRouteReq::kUserIdFieldNumber;
const int NewQueryRadomRouteReq::kTagsFieldNumber;
const int NewQueryRadomRouteReq::kSentenceFieldNumber;
const int NewQueryRadomRouteReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

NewQueryRadomRouteReq::NewQueryRadomRouteReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.NewQueryRadomRouteReq)
}

void NewQueryRadomRouteReq::InitAsDefaultInstance() {
}

NewQueryRadomRouteReq::NewQueryRadomRouteReq(const NewQueryRadomRouteReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.NewQueryRadomRouteReq)
}

void NewQueryRadomRouteReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  sentence_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewQueryRadomRouteReq::~NewQueryRadomRouteReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.NewQueryRadomRouteReq)
  SharedDtor();
}

void NewQueryRadomRouteReq::SharedDtor() {
  if (sentence_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sentence_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NewQueryRadomRouteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewQueryRadomRouteReq& NewQueryRadomRouteReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

NewQueryRadomRouteReq* NewQueryRadomRouteReq::default_instance_ = NULL;

NewQueryRadomRouteReq* NewQueryRadomRouteReq::New() const {
  return new NewQueryRadomRouteReq;
}

void NewQueryRadomRouteReq::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    user_id_ = 0u;
    if (has_sentence()) {
      if (sentence_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sentence_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NewQueryRadomRouteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.NewQueryRadomRouteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        break;
      }

      // repeated string tags = 2;
      case 2: {
        if (tag == 18) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tags;
        if (input->ExpectTag(26)) goto parse_sentence;
        break;
      }

      // required string sentence = 3;
      case 3: {
        if (tag == 26) {
         parse_sentence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sentence()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.NewQueryRadomRouteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.NewQueryRadomRouteReq)
  return false;
#undef DO_
}

void NewQueryRadomRouteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.NewQueryRadomRouteReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated string tags = 2;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tags(i), output);
  }

  // required string sentence = 3;
  if (has_sentence()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sentence(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.NewQueryRadomRouteReq)
}

int NewQueryRadomRouteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string sentence = 3;
    if (has_sentence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sentence());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated string tags = 2;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewQueryRadomRouteReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewQueryRadomRouteReq*>(&from));
}

void NewQueryRadomRouteReq::MergeFrom(const NewQueryRadomRouteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_sentence()) {
      set_sentence(from.sentence());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NewQueryRadomRouteReq::CopyFrom(const NewQueryRadomRouteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewQueryRadomRouteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void NewQueryRadomRouteReq::Swap(NewQueryRadomRouteReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    tags_.Swap(&other->tags_);
    std::swap(sentence_, other->sentence_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewQueryRadomRouteReq::GetTypeName() const {
  return "IM.Buddy.NewQueryRadomRouteReq";
}


// ===================================================================

#ifndef _MSC_VER
const int NewQueryRadomRouteRsp::kUserIdFieldNumber;
const int NewQueryRadomRouteRsp::kResultCodeFieldNumber;
const int NewQueryRadomRouteRsp::kRoutesFieldNumber;
const int NewQueryRadomRouteRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

NewQueryRadomRouteRsp::NewQueryRadomRouteRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.NewQueryRadomRouteRsp)
}

void NewQueryRadomRouteRsp::InitAsDefaultInstance() {
}

NewQueryRadomRouteRsp::NewQueryRadomRouteRsp(const NewQueryRadomRouteRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.NewQueryRadomRouteRsp)
}

void NewQueryRadomRouteRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewQueryRadomRouteRsp::~NewQueryRadomRouteRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.NewQueryRadomRouteRsp)
  SharedDtor();
}

void NewQueryRadomRouteRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NewQueryRadomRouteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewQueryRadomRouteRsp& NewQueryRadomRouteRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

NewQueryRadomRouteRsp* NewQueryRadomRouteRsp::default_instance_ = NULL;

NewQueryRadomRouteRsp* NewQueryRadomRouteRsp::New() const {
  return new NewQueryRadomRouteRsp;
}

void NewQueryRadomRouteRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewQueryRadomRouteRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(user_id_, result_code_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  routes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NewQueryRadomRouteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.NewQueryRadomRouteRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_routes;
        break;
      }

      // repeated .IM.Buddy.Route routes = 3;
      case 3: {
        if (tag == 26) {
         parse_routes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_routes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_routes;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.NewQueryRadomRouteRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.NewQueryRadomRouteRsp)
  return false;
#undef DO_
}

void NewQueryRadomRouteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.NewQueryRadomRouteRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // repeated .IM.Buddy.Route routes = 3;
  for (int i = 0; i < this->routes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->routes(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.NewQueryRadomRouteRsp)
}

int NewQueryRadomRouteRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.Buddy.Route routes = 3;
  total_size += 1 * this->routes_size();
  for (int i = 0; i < this->routes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routes(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewQueryRadomRouteRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewQueryRadomRouteRsp*>(&from));
}

void NewQueryRadomRouteRsp::MergeFrom(const NewQueryRadomRouteRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  routes_.MergeFrom(from.routes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NewQueryRadomRouteRsp::CopyFrom(const NewQueryRadomRouteRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewQueryRadomRouteRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->routes())) return false;
  return true;
}

void NewQueryRadomRouteRsp::Swap(NewQueryRadomRouteRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    routes_.Swap(&other->routes_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewQueryRadomRouteRsp::GetTypeName() const {
  return "IM.Buddy.NewQueryRadomRouteRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int NewUpdateRadomRouteReq::kUserIdFieldNumber;
const int NewUpdateRadomRouteReq::kDayCountFieldNumber;
const int NewUpdateRadomRouteReq::kCityCodeFieldNumber;
const int NewUpdateRadomRouteReq::kStartTransportToolFieldNumber;
const int NewUpdateRadomRouteReq::kEndTransportToolFieldNumber;
const int NewUpdateRadomRouteReq::kStartTimeFieldNumber;
const int NewUpdateRadomRouteReq::kEndTimeFieldNumber;
const int NewUpdateRadomRouteReq::kScenicIdsFieldNumber;
const int NewUpdateRadomRouteReq::kTagFieldNumber;
const int NewUpdateRadomRouteReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

NewUpdateRadomRouteReq::NewUpdateRadomRouteReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.NewUpdateRadomRouteReq)
}

void NewUpdateRadomRouteReq::InitAsDefaultInstance() {
}

NewUpdateRadomRouteReq::NewUpdateRadomRouteReq(const NewUpdateRadomRouteReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.NewUpdateRadomRouteReq)
}

void NewUpdateRadomRouteReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  day_count_ = 0u;
  city_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_transport_tool_ = 1;
  end_transport_tool_ = 1;
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewUpdateRadomRouteReq::~NewUpdateRadomRouteReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.NewUpdateRadomRouteReq)
  SharedDtor();
}

void NewUpdateRadomRouteReq::SharedDtor() {
  if (city_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_code_;
  }
  if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_time_;
  }
  if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_time_;
  }
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NewUpdateRadomRouteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewUpdateRadomRouteReq& NewUpdateRadomRouteReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

NewUpdateRadomRouteReq* NewUpdateRadomRouteReq::default_instance_ = NULL;

NewUpdateRadomRouteReq* NewUpdateRadomRouteReq::New() const {
  return new NewUpdateRadomRouteReq;
}

void NewUpdateRadomRouteReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewUpdateRadomRouteReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(user_id_, day_count_);
    if (has_city_code()) {
      if (city_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_code_->clear();
      }
    }
    start_transport_tool_ = 1;
    end_transport_tool_ = 1;
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_time_->clear();
      }
    }
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_time_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  scenic_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NewUpdateRadomRouteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.NewUpdateRadomRouteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_day_count;
        break;
      }

      // required uint32 day_count = 2;
      case 2: {
        if (tag == 16) {
         parse_day_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_count_)));
          set_has_day_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_city_code;
        break;
      }

      // required string city_code = 3;
      case 3: {
        if (tag == 26) {
         parse_city_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_transport_tool;
        break;
      }

      // required .IM.Buddy.TransportToolType start_transport_tool = 4;
      case 4: {
        if (tag == 32) {
         parse_start_transport_tool:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::Buddy::TransportToolType_IsValid(value)) {
            set_start_transport_tool(static_cast< ::IM::Buddy::TransportToolType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_end_transport_tool;
        break;
      }

      // required .IM.Buddy.TransportToolType end_transport_tool = 5;
      case 5: {
        if (tag == 40) {
         parse_end_transport_tool:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::Buddy::TransportToolType_IsValid(value)) {
            set_end_transport_tool(static_cast< ::IM::Buddy::TransportToolType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_start_time;
        break;
      }

      // required string start_time = 6;
      case 6: {
        if (tag == 50) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_end_time;
        break;
      }

      // required string end_time = 7;
      case 7: {
        if (tag == 58) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_scenic_ids;
        break;
      }

      // repeated uint32 scenic_ids = 8;
      case 8: {
        if (tag == 64) {
         parse_scenic_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_scenic_ids())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_scenic_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_scenic_ids;
        if (input->ExpectTag(74)) goto parse_tag;
        break;
      }

      // required string tag = 9;
      case 9: {
        if (tag == 74) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.NewUpdateRadomRouteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.NewUpdateRadomRouteReq)
  return false;
#undef DO_
}

void NewUpdateRadomRouteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.NewUpdateRadomRouteReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 day_count = 2;
  if (has_day_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->day_count(), output);
  }

  // required string city_code = 3;
  if (has_city_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->city_code(), output);
  }

  // required .IM.Buddy.TransportToolType start_transport_tool = 4;
  if (has_start_transport_tool()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->start_transport_tool(), output);
  }

  // required .IM.Buddy.TransportToolType end_transport_tool = 5;
  if (has_end_transport_tool()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->end_transport_tool(), output);
  }

  // required string start_time = 6;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->start_time(), output);
  }

  // required string end_time = 7;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->end_time(), output);
  }

  // repeated uint32 scenic_ids = 8;
  for (int i = 0; i < this->scenic_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->scenic_ids(i), output);
  }

  // required string tag = 9;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->tag(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.NewUpdateRadomRouteReq)
}

int NewUpdateRadomRouteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 day_count = 2;
    if (has_day_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day_count());
    }

    // required string city_code = 3;
    if (has_city_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city_code());
    }

    // required .IM.Buddy.TransportToolType start_transport_tool = 4;
    if (has_start_transport_tool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->start_transport_tool());
    }

    // required .IM.Buddy.TransportToolType end_transport_tool = 5;
    if (has_end_transport_tool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->end_transport_tool());
    }

    // required string start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_time());
    }

    // required string end_time = 7;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string tag = 9;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 scenic_ids = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->scenic_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->scenic_ids(i));
    }
    total_size += 1 * this->scenic_ids_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewUpdateRadomRouteReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewUpdateRadomRouteReq*>(&from));
}

void NewUpdateRadomRouteReq::MergeFrom(const NewUpdateRadomRouteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  scenic_ids_.MergeFrom(from.scenic_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_day_count()) {
      set_day_count(from.day_count());
    }
    if (from.has_city_code()) {
      set_city_code(from.city_code());
    }
    if (from.has_start_transport_tool()) {
      set_start_transport_tool(from.start_transport_tool());
    }
    if (from.has_end_transport_tool()) {
      set_end_transport_tool(from.end_transport_tool());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NewUpdateRadomRouteReq::CopyFrom(const NewUpdateRadomRouteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewUpdateRadomRouteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000017f) != 0x0000017f) return false;

  return true;
}

void NewUpdateRadomRouteReq::Swap(NewUpdateRadomRouteReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(day_count_, other->day_count_);
    std::swap(city_code_, other->city_code_);
    std::swap(start_transport_tool_, other->start_transport_tool_);
    std::swap(end_transport_tool_, other->end_transport_tool_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    scenic_ids_.Swap(&other->scenic_ids_);
    std::swap(tag_, other->tag_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewUpdateRadomRouteReq::GetTypeName() const {
  return "IM.Buddy.NewUpdateRadomRouteReq";
}


// ===================================================================

#ifndef _MSC_VER
const int NewUpdateRadomRouteRsp::kUserIdFieldNumber;
const int NewUpdateRadomRouteRsp::kResultCodeFieldNumber;
const int NewUpdateRadomRouteRsp::kRouteFieldNumber;
const int NewUpdateRadomRouteRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

NewUpdateRadomRouteRsp::NewUpdateRadomRouteRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.NewUpdateRadomRouteRsp)
}

void NewUpdateRadomRouteRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  route_ = const_cast< ::IM::Buddy::Route*>(
      ::IM::Buddy::Route::internal_default_instance());
#else
  route_ = const_cast< ::IM::Buddy::Route*>(&::IM::Buddy::Route::default_instance());
#endif
}

NewUpdateRadomRouteRsp::NewUpdateRadomRouteRsp(const NewUpdateRadomRouteRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.NewUpdateRadomRouteRsp)
}

void NewUpdateRadomRouteRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  route_ = NULL;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewUpdateRadomRouteRsp::~NewUpdateRadomRouteRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.NewUpdateRadomRouteRsp)
  SharedDtor();
}

void NewUpdateRadomRouteRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete route_;
  }
}

void NewUpdateRadomRouteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewUpdateRadomRouteRsp& NewUpdateRadomRouteRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

NewUpdateRadomRouteRsp* NewUpdateRadomRouteRsp::default_instance_ = NULL;

NewUpdateRadomRouteRsp* NewUpdateRadomRouteRsp::New() const {
  return new NewUpdateRadomRouteRsp;
}

void NewUpdateRadomRouteRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewUpdateRadomRouteRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, result_code_);
    if (has_route()) {
      if (route_ != NULL) route_->::IM::Buddy::Route::Clear();
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NewUpdateRadomRouteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.NewUpdateRadomRouteRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_route;
        break;
      }

      // required .IM.Buddy.Route route = 3;
      case 3: {
        if (tag == 26) {
         parse_route:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.NewUpdateRadomRouteRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.NewUpdateRadomRouteRsp)
  return false;
#undef DO_
}

void NewUpdateRadomRouteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.NewUpdateRadomRouteRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // required .IM.Buddy.Route route = 3;
  if (has_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->route(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.NewUpdateRadomRouteRsp)
}

int NewUpdateRadomRouteRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required .IM.Buddy.Route route = 3;
    if (has_route()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->route());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewUpdateRadomRouteRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewUpdateRadomRouteRsp*>(&from));
}

void NewUpdateRadomRouteRsp::MergeFrom(const NewUpdateRadomRouteRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_route()) {
      mutable_route()->::IM::Buddy::Route::MergeFrom(from.route());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NewUpdateRadomRouteRsp::CopyFrom(const NewUpdateRadomRouteRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewUpdateRadomRouteRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_route()) {
    if (!this->route().IsInitialized()) return false;
  }
  return true;
}

void NewUpdateRadomRouteRsp::Swap(NewUpdateRadomRouteRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(route_, other->route_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewUpdateRadomRouteRsp::GetTypeName() const {
  return "IM.Buddy.NewUpdateRadomRouteRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int NewCreateMyTravelReq::kUserIdFieldNumber;
const int NewCreateMyTravelReq::kDayCountFieldNumber;
const int NewCreateMyTravelReq::kCityCodeFieldNumber;
const int NewCreateMyTravelReq::kTagsFieldNumber;
const int NewCreateMyTravelReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

NewCreateMyTravelReq::NewCreateMyTravelReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.NewCreateMyTravelReq)
}

void NewCreateMyTravelReq::InitAsDefaultInstance() {
}

NewCreateMyTravelReq::NewCreateMyTravelReq(const NewCreateMyTravelReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.NewCreateMyTravelReq)
}

void NewCreateMyTravelReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  day_count_ = 0u;
  city_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewCreateMyTravelReq::~NewCreateMyTravelReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.NewCreateMyTravelReq)
  SharedDtor();
}

void NewCreateMyTravelReq::SharedDtor() {
  if (city_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_code_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NewCreateMyTravelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewCreateMyTravelReq& NewCreateMyTravelReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

NewCreateMyTravelReq* NewCreateMyTravelReq::default_instance_ = NULL;

NewCreateMyTravelReq* NewCreateMyTravelReq::New() const {
  return new NewCreateMyTravelReq;
}

void NewCreateMyTravelReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewCreateMyTravelReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(user_id_, day_count_);
    if (has_city_code()) {
      if (city_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_code_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NewCreateMyTravelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.NewCreateMyTravelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_day_count;
        break;
      }

      // required uint32 day_count = 2;
      case 2: {
        if (tag == 16) {
         parse_day_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_count_)));
          set_has_day_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_city_code;
        break;
      }

      // required string city_code = 3;
      case 3: {
        if (tag == 26) {
         parse_city_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tags;
        break;
      }

      // repeated string tags = 4;
      case 4: {
        if (tag == 34) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tags;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.NewCreateMyTravelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.NewCreateMyTravelReq)
  return false;
#undef DO_
}

void NewCreateMyTravelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.NewCreateMyTravelReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 day_count = 2;
  if (has_day_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->day_count(), output);
  }

  // required string city_code = 3;
  if (has_city_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->city_code(), output);
  }

  // repeated string tags = 4;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tags(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.NewCreateMyTravelReq)
}

int NewCreateMyTravelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 day_count = 2;
    if (has_day_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day_count());
    }

    // required string city_code = 3;
    if (has_city_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated string tags = 4;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewCreateMyTravelReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewCreateMyTravelReq*>(&from));
}

void NewCreateMyTravelReq::MergeFrom(const NewCreateMyTravelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_day_count()) {
      set_day_count(from.day_count());
    }
    if (from.has_city_code()) {
      set_city_code(from.city_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NewCreateMyTravelReq::CopyFrom(const NewCreateMyTravelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewCreateMyTravelReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NewCreateMyTravelReq::Swap(NewCreateMyTravelReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(day_count_, other->day_count_);
    std::swap(city_code_, other->city_code_);
    tags_.Swap(&other->tags_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewCreateMyTravelReq::GetTypeName() const {
  return "IM.Buddy.NewCreateMyTravelReq";
}


// ===================================================================

#ifndef _MSC_VER
const int NewCreateMyTravelRsp::kUserIdFieldNumber;
const int NewCreateMyTravelRsp::kResultCodeFieldNumber;
const int NewCreateMyTravelRsp::kRouteFieldNumber;
const int NewCreateMyTravelRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

NewCreateMyTravelRsp::NewCreateMyTravelRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.NewCreateMyTravelRsp)
}

void NewCreateMyTravelRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  route_ = const_cast< ::IM::Buddy::Route*>(
      ::IM::Buddy::Route::internal_default_instance());
#else
  route_ = const_cast< ::IM::Buddy::Route*>(&::IM::Buddy::Route::default_instance());
#endif
}

NewCreateMyTravelRsp::NewCreateMyTravelRsp(const NewCreateMyTravelRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.NewCreateMyTravelRsp)
}

void NewCreateMyTravelRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  route_ = NULL;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewCreateMyTravelRsp::~NewCreateMyTravelRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.NewCreateMyTravelRsp)
  SharedDtor();
}

void NewCreateMyTravelRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete route_;
  }
}

void NewCreateMyTravelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewCreateMyTravelRsp& NewCreateMyTravelRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

NewCreateMyTravelRsp* NewCreateMyTravelRsp::default_instance_ = NULL;

NewCreateMyTravelRsp* NewCreateMyTravelRsp::New() const {
  return new NewCreateMyTravelRsp;
}

void NewCreateMyTravelRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewCreateMyTravelRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, result_code_);
    if (has_route()) {
      if (route_ != NULL) route_->::IM::Buddy::Route::Clear();
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NewCreateMyTravelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.NewCreateMyTravelRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_route;
        break;
      }

      // required .IM.Buddy.Route route = 3;
      case 3: {
        if (tag == 26) {
         parse_route:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.NewCreateMyTravelRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.NewCreateMyTravelRsp)
  return false;
#undef DO_
}

void NewCreateMyTravelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.NewCreateMyTravelRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // required .IM.Buddy.Route route = 3;
  if (has_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->route(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.NewCreateMyTravelRsp)
}

int NewCreateMyTravelRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required .IM.Buddy.Route route = 3;
    if (has_route()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->route());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewCreateMyTravelRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewCreateMyTravelRsp*>(&from));
}

void NewCreateMyTravelRsp::MergeFrom(const NewCreateMyTravelRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_route()) {
      mutable_route()->::IM::Buddy::Route::MergeFrom(from.route());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NewCreateMyTravelRsp::CopyFrom(const NewCreateMyTravelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewCreateMyTravelRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_route()) {
    if (!this->route().IsInitialized()) return false;
  }
  return true;
}

void NewCreateMyTravelRsp::Swap(NewCreateMyTravelRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(route_, other->route_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewCreateMyTravelRsp::GetTypeName() const {
  return "IM.Buddy.NewCreateMyTravelRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int NewCreateCollectRouteReq::kUserIdFieldNumber;
const int NewCreateCollectRouteReq::kCollectFieldNumber;
const int NewCreateCollectRouteReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

NewCreateCollectRouteReq::NewCreateCollectRouteReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.NewCreateCollectRouteReq)
}

void NewCreateCollectRouteReq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  collect_ = const_cast< ::IM::Buddy::CollectionRoute*>(
      ::IM::Buddy::CollectionRoute::internal_default_instance());
#else
  collect_ = const_cast< ::IM::Buddy::CollectionRoute*>(&::IM::Buddy::CollectionRoute::default_instance());
#endif
}

NewCreateCollectRouteReq::NewCreateCollectRouteReq(const NewCreateCollectRouteReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.NewCreateCollectRouteReq)
}

void NewCreateCollectRouteReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  collect_ = NULL;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewCreateCollectRouteReq::~NewCreateCollectRouteReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.NewCreateCollectRouteReq)
  SharedDtor();
}

void NewCreateCollectRouteReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete collect_;
  }
}

void NewCreateCollectRouteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewCreateCollectRouteReq& NewCreateCollectRouteReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

NewCreateCollectRouteReq* NewCreateCollectRouteReq::default_instance_ = NULL;

NewCreateCollectRouteReq* NewCreateCollectRouteReq::New() const {
  return new NewCreateCollectRouteReq;
}

void NewCreateCollectRouteReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = 0u;
    if (has_collect()) {
      if (collect_ != NULL) collect_->::IM::Buddy::CollectionRoute::Clear();
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NewCreateCollectRouteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.NewCreateCollectRouteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_collect;
        break;
      }

      // required .IM.Buddy.CollectionRoute collect = 2;
      case 2: {
        if (tag == 18) {
         parse_collect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.NewCreateCollectRouteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.NewCreateCollectRouteReq)
  return false;
#undef DO_
}

void NewCreateCollectRouteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.NewCreateCollectRouteReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.Buddy.CollectionRoute collect = 2;
  if (has_collect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->collect(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.NewCreateCollectRouteReq)
}

int NewCreateCollectRouteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.Buddy.CollectionRoute collect = 2;
    if (has_collect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collect());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewCreateCollectRouteReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewCreateCollectRouteReq*>(&from));
}

void NewCreateCollectRouteReq::MergeFrom(const NewCreateCollectRouteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_collect()) {
      mutable_collect()->::IM::Buddy::CollectionRoute::MergeFrom(from.collect());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NewCreateCollectRouteReq::CopyFrom(const NewCreateCollectRouteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewCreateCollectRouteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_collect()) {
    if (!this->collect().IsInitialized()) return false;
  }
  return true;
}

void NewCreateCollectRouteReq::Swap(NewCreateCollectRouteReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(collect_, other->collect_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewCreateCollectRouteReq::GetTypeName() const {
  return "IM.Buddy.NewCreateCollectRouteReq";
}


// ===================================================================

#ifndef _MSC_VER
const int NewCreateCollectRouteRsp::kUserIdFieldNumber;
const int NewCreateCollectRouteRsp::kResultCodeFieldNumber;
const int NewCreateCollectRouteRsp::kCollectIdFieldNumber;
const int NewCreateCollectRouteRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

NewCreateCollectRouteRsp::NewCreateCollectRouteRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.NewCreateCollectRouteRsp)
}

void NewCreateCollectRouteRsp::InitAsDefaultInstance() {
}

NewCreateCollectRouteRsp::NewCreateCollectRouteRsp(const NewCreateCollectRouteRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.NewCreateCollectRouteRsp)
}

void NewCreateCollectRouteRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  collect_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewCreateCollectRouteRsp::~NewCreateCollectRouteRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.NewCreateCollectRouteRsp)
  SharedDtor();
}

void NewCreateCollectRouteRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NewCreateCollectRouteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewCreateCollectRouteRsp& NewCreateCollectRouteRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

NewCreateCollectRouteRsp* NewCreateCollectRouteRsp::default_instance_ = NULL;

NewCreateCollectRouteRsp* NewCreateCollectRouteRsp::New() const {
  return new NewCreateCollectRouteRsp;
}

void NewCreateCollectRouteRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewCreateCollectRouteRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, result_code_);
    collect_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NewCreateCollectRouteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.NewCreateCollectRouteRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_collect_id;
        break;
      }

      // required uint32 collect_id = 3;
      case 3: {
        if (tag == 24) {
         parse_collect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collect_id_)));
          set_has_collect_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.NewCreateCollectRouteRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.NewCreateCollectRouteRsp)
  return false;
#undef DO_
}

void NewCreateCollectRouteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.NewCreateCollectRouteRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // required uint32 collect_id = 3;
  if (has_collect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->collect_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.NewCreateCollectRouteRsp)
}

int NewCreateCollectRouteRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // required uint32 collect_id = 3;
    if (has_collect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collect_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewCreateCollectRouteRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewCreateCollectRouteRsp*>(&from));
}

void NewCreateCollectRouteRsp::MergeFrom(const NewCreateCollectRouteRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_collect_id()) {
      set_collect_id(from.collect_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NewCreateCollectRouteRsp::CopyFrom(const NewCreateCollectRouteRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewCreateCollectRouteRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NewCreateCollectRouteRsp::Swap(NewCreateCollectRouteRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(collect_id_, other->collect_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewCreateCollectRouteRsp::GetTypeName() const {
  return "IM.Buddy.NewCreateCollectRouteRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int NewDelCollectRouteReq::kUserIdFieldNumber;
const int NewDelCollectRouteReq::kCollectIdFieldNumber;
const int NewDelCollectRouteReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

NewDelCollectRouteReq::NewDelCollectRouteReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.NewDelCollectRouteReq)
}

void NewDelCollectRouteReq::InitAsDefaultInstance() {
}

NewDelCollectRouteReq::NewDelCollectRouteReq(const NewDelCollectRouteReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.NewDelCollectRouteReq)
}

void NewDelCollectRouteReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewDelCollectRouteReq::~NewDelCollectRouteReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.NewDelCollectRouteReq)
  SharedDtor();
}

void NewDelCollectRouteReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NewDelCollectRouteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewDelCollectRouteReq& NewDelCollectRouteReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

NewDelCollectRouteReq* NewDelCollectRouteReq::default_instance_ = NULL;

NewDelCollectRouteReq* NewDelCollectRouteReq::New() const {
  return new NewDelCollectRouteReq;
}

void NewDelCollectRouteReq::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  collect_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NewDelCollectRouteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.NewDelCollectRouteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_collect_id;
        break;
      }

      // repeated uint32 collect_id = 2;
      case 2: {
        if (tag == 16) {
         parse_collect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_collect_id())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_collect_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_collect_id;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.NewDelCollectRouteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.NewDelCollectRouteReq)
  return false;
#undef DO_
}

void NewDelCollectRouteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.NewDelCollectRouteReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // repeated uint32 collect_id = 2;
  for (int i = 0; i < this->collect_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->collect_id(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.NewDelCollectRouteReq)
}

int NewDelCollectRouteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated uint32 collect_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->collect_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->collect_id(i));
    }
    total_size += 1 * this->collect_id_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewDelCollectRouteReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewDelCollectRouteReq*>(&from));
}

void NewDelCollectRouteReq::MergeFrom(const NewDelCollectRouteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  collect_id_.MergeFrom(from.collect_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NewDelCollectRouteReq::CopyFrom(const NewDelCollectRouteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewDelCollectRouteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NewDelCollectRouteReq::Swap(NewDelCollectRouteReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    collect_id_.Swap(&other->collect_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewDelCollectRouteReq::GetTypeName() const {
  return "IM.Buddy.NewDelCollectRouteReq";
}


// ===================================================================

#ifndef _MSC_VER
const int NewDelCollectRouteRsp::kUserIdFieldNumber;
const int NewDelCollectRouteRsp::kResultCodeFieldNumber;
const int NewDelCollectRouteRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

NewDelCollectRouteRsp::NewDelCollectRouteRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.NewDelCollectRouteRsp)
}

void NewDelCollectRouteRsp::InitAsDefaultInstance() {
}

NewDelCollectRouteRsp::NewDelCollectRouteRsp(const NewDelCollectRouteRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.NewDelCollectRouteRsp)
}

void NewDelCollectRouteRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewDelCollectRouteRsp::~NewDelCollectRouteRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.NewDelCollectRouteRsp)
  SharedDtor();
}

void NewDelCollectRouteRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NewDelCollectRouteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewDelCollectRouteRsp& NewDelCollectRouteRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

NewDelCollectRouteRsp* NewDelCollectRouteRsp::default_instance_ = NULL;

NewDelCollectRouteRsp* NewDelCollectRouteRsp::New() const {
  return new NewDelCollectRouteRsp;
}

void NewDelCollectRouteRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewDelCollectRouteRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, result_code_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NewDelCollectRouteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.NewDelCollectRouteRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.NewDelCollectRouteRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.NewDelCollectRouteRsp)
  return false;
#undef DO_
}

void NewDelCollectRouteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.NewDelCollectRouteRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.NewDelCollectRouteRsp)
}

int NewDelCollectRouteRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewDelCollectRouteRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewDelCollectRouteRsp*>(&from));
}

void NewDelCollectRouteRsp::MergeFrom(const NewDelCollectRouteRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NewDelCollectRouteRsp::CopyFrom(const NewDelCollectRouteRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewDelCollectRouteRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NewDelCollectRouteRsp::Swap(NewDelCollectRouteRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewDelCollectRouteRsp::GetTypeName() const {
  return "IM.Buddy.NewDelCollectRouteRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int NewQueryCollectRouteReq::kUserIdFieldNumber;
const int NewQueryCollectRouteReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

NewQueryCollectRouteReq::NewQueryCollectRouteReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.NewQueryCollectRouteReq)
}

void NewQueryCollectRouteReq::InitAsDefaultInstance() {
}

NewQueryCollectRouteReq::NewQueryCollectRouteReq(const NewQueryCollectRouteReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.NewQueryCollectRouteReq)
}

void NewQueryCollectRouteReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewQueryCollectRouteReq::~NewQueryCollectRouteReq() {
  // @@protoc_insertion_point(destructor:IM.Buddy.NewQueryCollectRouteReq)
  SharedDtor();
}

void NewQueryCollectRouteReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NewQueryCollectRouteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewQueryCollectRouteReq& NewQueryCollectRouteReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

NewQueryCollectRouteReq* NewQueryCollectRouteReq::default_instance_ = NULL;

NewQueryCollectRouteReq* NewQueryCollectRouteReq::New() const {
  return new NewQueryCollectRouteReq;
}

void NewQueryCollectRouteReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    user_id_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NewQueryCollectRouteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.NewQueryCollectRouteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.NewQueryCollectRouteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.NewQueryCollectRouteReq)
  return false;
#undef DO_
}

void NewQueryCollectRouteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.NewQueryCollectRouteReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.NewQueryCollectRouteReq)
}

int NewQueryCollectRouteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewQueryCollectRouteReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewQueryCollectRouteReq*>(&from));
}

void NewQueryCollectRouteReq::MergeFrom(const NewQueryCollectRouteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NewQueryCollectRouteReq::CopyFrom(const NewQueryCollectRouteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewQueryCollectRouteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NewQueryCollectRouteReq::Swap(NewQueryCollectRouteReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewQueryCollectRouteReq::GetTypeName() const {
  return "IM.Buddy.NewQueryCollectRouteReq";
}


// ===================================================================

#ifndef _MSC_VER
const int NewQueryCollectRouteRsp::kUserIdFieldNumber;
const int NewQueryCollectRouteRsp::kResultCodeFieldNumber;
const int NewQueryCollectRouteRsp::kCollectionsFieldNumber;
const int NewQueryCollectRouteRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

NewQueryCollectRouteRsp::NewQueryCollectRouteRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.NewQueryCollectRouteRsp)
}

void NewQueryCollectRouteRsp::InitAsDefaultInstance() {
}

NewQueryCollectRouteRsp::NewQueryCollectRouteRsp(const NewQueryCollectRouteRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.NewQueryCollectRouteRsp)
}

void NewQueryCollectRouteRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  result_code_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewQueryCollectRouteRsp::~NewQueryCollectRouteRsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.NewQueryCollectRouteRsp)
  SharedDtor();
}

void NewQueryCollectRouteRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NewQueryCollectRouteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NewQueryCollectRouteRsp& NewQueryCollectRouteRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

NewQueryCollectRouteRsp* NewQueryCollectRouteRsp::default_instance_ = NULL;

NewQueryCollectRouteRsp* NewQueryCollectRouteRsp::New() const {
  return new NewQueryCollectRouteRsp;
}

void NewQueryCollectRouteRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewQueryCollectRouteRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(user_id_, result_code_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  collections_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool NewQueryCollectRouteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.NewQueryCollectRouteRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_collections;
        break;
      }

      // repeated .IM.Buddy.CollectionRoute collections = 3;
      case 3: {
        if (tag == 26) {
         parse_collections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_collections()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_collections;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.NewQueryCollectRouteRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.NewQueryCollectRouteRsp)
  return false;
#undef DO_
}

void NewQueryCollectRouteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.NewQueryCollectRouteRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // repeated .IM.Buddy.CollectionRoute collections = 3;
  for (int i = 0; i < this->collections_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->collections(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.NewQueryCollectRouteRsp)
}

int NewQueryCollectRouteRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.Buddy.CollectionRoute collections = 3;
  total_size += 1 * this->collections_size();
  for (int i = 0; i < this->collections_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->collections(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewQueryCollectRouteRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NewQueryCollectRouteRsp*>(&from));
}

void NewQueryCollectRouteRsp::MergeFrom(const NewQueryCollectRouteRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  collections_.MergeFrom(from.collections_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void NewQueryCollectRouteRsp::CopyFrom(const NewQueryCollectRouteRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewQueryCollectRouteRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->collections())) return false;
  return true;
}

void NewQueryCollectRouteRsp::Swap(NewQueryCollectRouteRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_code_, other->result_code_);
    collections_.Swap(&other->collections_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NewQueryCollectRouteRsp::GetTypeName() const {
  return "IM.Buddy.NewQueryCollectRouteRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int Info_Modify_Req::kUserIdFieldNumber;
const int Info_Modify_Req::kModifyTypeFieldNumber;
const int Info_Modify_Req::kModifyContextFieldNumber;
const int Info_Modify_Req::kAttachDataFieldNumber;
#endif  // !_MSC_VER

Info_Modify_Req::Info_Modify_Req()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.Info_Modify_Req)
}

void Info_Modify_Req::InitAsDefaultInstance() {
}

Info_Modify_Req::Info_Modify_Req(const Info_Modify_Req& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.Info_Modify_Req)
}

void Info_Modify_Req::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  modify_type_ = 1;
  modify_context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Info_Modify_Req::~Info_Modify_Req() {
  // @@protoc_insertion_point(destructor:IM.Buddy.Info_Modify_Req)
  SharedDtor();
}

void Info_Modify_Req::SharedDtor() {
  if (modify_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete modify_context_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Info_Modify_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Info_Modify_Req& Info_Modify_Req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

Info_Modify_Req* Info_Modify_Req::default_instance_ = NULL;

Info_Modify_Req* Info_Modify_Req::New() const {
  return new Info_Modify_Req;
}

void Info_Modify_Req::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    user_id_ = 0u;
    modify_type_ = 1;
    if (has_modify_context()) {
      if (modify_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        modify_context_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Info_Modify_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.Info_Modify_Req)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_modify_type;
        break;
      }

      // required .IM.Buddy.ModifyType modify_type = 2;
      case 2: {
        if (tag == 16) {
         parse_modify_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::Buddy::ModifyType_IsValid(value)) {
            set_modify_type(static_cast< ::IM::Buddy::ModifyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_modify_context;
        break;
      }

      // required string modify_context = 3;
      case 3: {
        if (tag == 26) {
         parse_modify_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modify_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.Info_Modify_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.Info_Modify_Req)
  return false;
#undef DO_
}

void Info_Modify_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.Info_Modify_Req)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.Buddy.ModifyType modify_type = 2;
  if (has_modify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->modify_type(), output);
  }

  // required string modify_context = 3;
  if (has_modify_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->modify_context(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.Info_Modify_Req)
}

int Info_Modify_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.Buddy.ModifyType modify_type = 2;
    if (has_modify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->modify_type());
    }

    // required string modify_context = 3;
    if (has_modify_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modify_context());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info_Modify_Req::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Info_Modify_Req*>(&from));
}

void Info_Modify_Req::MergeFrom(const Info_Modify_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_modify_type()) {
      set_modify_type(from.modify_type());
    }
    if (from.has_modify_context()) {
      set_modify_context(from.modify_context());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Info_Modify_Req::CopyFrom(const Info_Modify_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info_Modify_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Info_Modify_Req::Swap(Info_Modify_Req* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(modify_type_, other->modify_type_);
    std::swap(modify_context_, other->modify_context_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Info_Modify_Req::GetTypeName() const {
  return "IM.Buddy.Info_Modify_Req";
}


// ===================================================================

#ifndef _MSC_VER
const int Info_Modify_Rsp::kUserIdFieldNumber;
const int Info_Modify_Rsp::kRetCodeFieldNumber;
const int Info_Modify_Rsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

Info_Modify_Rsp::Info_Modify_Rsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Buddy.Info_Modify_Rsp)
}

void Info_Modify_Rsp::InitAsDefaultInstance() {
}

Info_Modify_Rsp::Info_Modify_Rsp(const Info_Modify_Rsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Buddy.Info_Modify_Rsp)
}

void Info_Modify_Rsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  ret_code_ = 0;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Info_Modify_Rsp::~Info_Modify_Rsp() {
  // @@protoc_insertion_point(destructor:IM.Buddy.Info_Modify_Rsp)
  SharedDtor();
}

void Info_Modify_Rsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Info_Modify_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Info_Modify_Rsp& Info_Modify_Rsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBuddy_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBuddy_2eproto();
#endif
  return *default_instance_;
}

Info_Modify_Rsp* Info_Modify_Rsp::default_instance_ = NULL;

Info_Modify_Rsp* Info_Modify_Rsp::New() const {
  return new Info_Modify_Rsp;
}

void Info_Modify_Rsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Info_Modify_Rsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(user_id_, ret_code_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool Info_Modify_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Buddy.Info_Modify_Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret_code;
        break;
      }

      // required .IM.BaseDefine.ResultType ret_code = 2;
      case 2: {
        if (tag == 16) {
         parse_ret_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::ResultType_IsValid(value)) {
            set_ret_code(static_cast< ::IM::BaseDefine::ResultType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Buddy.Info_Modify_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Buddy.Info_Modify_Rsp)
  return false;
#undef DO_
}

void Info_Modify_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Buddy.Info_Modify_Rsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.ResultType ret_code = 2;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret_code(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Buddy.Info_Modify_Rsp)
}

int Info_Modify_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.ResultType ret_code = 2;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info_Modify_Rsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Info_Modify_Rsp*>(&from));
}

void Info_Modify_Rsp::MergeFrom(const Info_Modify_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Info_Modify_Rsp::CopyFrom(const Info_Modify_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info_Modify_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Info_Modify_Rsp::Swap(Info_Modify_Rsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(ret_code_, other->ret_code_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Info_Modify_Rsp::GetTypeName() const {
  return "IM.Buddy.Info_Modify_Rsp";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Buddy
}  // namespace IM

// @@protoc_insertion_point(global_scope)
